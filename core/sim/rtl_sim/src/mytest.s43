/*===========================================================================*/
/* Copyright (C) 2001 Authors                                                */
/*                                                                           */
/* This source file may be used and distributed without restriction provided */
/* that this copyright statement is not removed from the file and that any   */
/* derivative work contains the original copyright notice and the associated */
/* disclaimer.                                                               */
/*                                                                           */
/* This source file is free software; you can redistribute it and/or modify  */
/* it under the terms of the GNU Lesser General Public License as published  */
/* by the Free Software Foundation; either version 2.1 of the License, or    */
/* (at your option) any later version.                                       */
/*                                                                           */
/* This source is distributed in the hope that it will be useful, but WITHOUT*/
/* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     */
/* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public       */
/* License for more details.                                                 */
/*                                                                           */
/* You should have received a copy of the GNU Lesser General Public License  */
/* along with this source; if not, write to the Free Software Foundation,    */
/* Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA        */
/*                                                                           */
/*===========================================================================*/
/*                 SINGLE-OPERAND ARITHMETIC: CALL  INSTRUCTION              */
/*---------------------------------------------------------------------------*/
/* Test the CALL  instruction.                                               */
/*                                                                           */
/* Author(s):                                                                */
/*             - Olivier Girard,    olgirard@gmail.com                       */
/*                                                                           */
/*---------------------------------------------------------------------------*/
/* $Rev: 200 $                                                                */
/* $LastChangedBy: olivier.girard $                                          */
/* $LastChangedDate: 2015-01-21 23:01:31 +0100 (Wed, 21 Jan 2015) $          */
/*===========================================================================*/

.include "pmem_defs.asm"

.global main

WAIT_FUNC:
	dec r14
	jnz WAIT_FUNC
	ret
	
main:


 	mov	#0x90C0, &MPY
	mov	#0xE093, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x10BE, &RESLO
	mov.b	#0xB9, &RESHI
	mov	#0x57FF, &MPYS
	mov.b	#0x3C, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov.b	#0xE3, &RESHI
	mov.b	&RESHI, r9
	nop
	mov	#0x407F, &MACS
	mov	#0xC040, &RESHI
	mov	#0x81FE, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov.b	#0x24, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x81F6, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xCA95, &MPY
	mov	#0x99D1, &RESHI
	mov.b	#0xC2, &RESHI
	mov	#0x3E0B, &MPYS
	mov	#0xEF41, &RESLO
	mov	#0x0001, &MAC
	mov	#0x5530, &RESHI
	mov	#0x00FF, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov.b	&MPY, r9
	nop
	mov	#0x5C60, &MPY
	mov	#0xD200, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xEDE7, &RESLO
	mov	#0x0282, &MAC
	mov	#0x4FFF, &RESLO
	mov	#0xC44F, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x6029, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x0201, &MPYS
	mov	#0xA8C8, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x981E, &RESHI
	mov	#0x8001, &MACS
	mov	#0x7DD1, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xB488, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov.b	&RESHI, r9
	nop
	mov	#0x5FFF, &MPY
	mov	#0x0003, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xFFFF, &RESHI
	mov.b	&RESHI, r9
	nop
	mov.b	&RESHI, r9
	nop
	mov.b	&SUMEXT, r9
	nop
	mov	#0x8001, &MPYS
	mov.b	#0x4F, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x5B80, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x5F80, &MAC
	mov	#0x3402, &MACS
	mov	#0x3F6E, &RESLO
	mov	#0x0F32, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x98F9, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x3402, &MPYS
	mov	#0xABFF, &MPY
	mov	#0x0006, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov.b	#0x9A, &RESHI
	mov.b	&RESHI, r9
	nop
	mov.b	&OP2, r9
	nop
	mov	#0x5558, &MPY
	mov	#0xD8E8, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xFF81, &RESHI
	mov.b	&RESHI, r9
	nop
	mov.b	&RESLO, r9
	nop
	mov.b	#0x84, &MPY
	mov	#0x0807, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x8000, &MACS
	mov	#0x5201, &MPYS
	mov	#0xAFCF, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov.b	#0xD4, &RESHI
	mov.b	&RESLO, r9
	nop
	mov.b	&RESHI, r9
	nop
	mov	#0x3B08, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xDA69, &MAC
	mov	#0xA0DB, &RESHI
	mov	#0x8000, &MACS
	mov	#0x67D7, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xA61B, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov.b	&RESHI, r9
	nop
	mov	#0xCCFF, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xE461, &MPY
	mov	#0x0521, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xC9D1, &RESHI
	mov.b	#0x3B, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x4001, &MPYS
	mov	#0x80DD, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x5BFB, &RESLO
	mov.b	&MPYS, r9
	nop
	mov	#0xD71A, &MAC
	mov	#0x5B39, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xC04D, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x6102, &MPYS
	mov	#0xC0C0, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov.b	#0xC3, &RESHI
	mov.b	&RESHI, r9
	nop
	mov.b	#0x7E, &MACS
	mov	#0xAAFF, &MPY
	mov	#0x0060, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x7F20, &RESHI
	mov.b	&RESHI, r9
	nop
	mov.b	#0xF0, &SUMEXT
	mov	#0xAABF, &MPY
	mov	#0x0060, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov.b	#0x20, &RESHI
	mov.b	&RESHI, r9
	nop
	mov.b	#0x2A, &RESLO
	mov	#0xAAAF, &MPY
	mov	#0x0060, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xFFE0, &RESHI
	mov.b	&RESHI, r9
	nop
	mov.b	#0xDA, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x1F7F, &MAC
	mov.b	&RESLO, r9
	nop
	mov.b	#0x41, &MAC
	mov	#0xFF10, &RESLO
	mov	#0xFFFF, &RESHI
	mov	#0x71B6, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov.b	#0x2C, &RESHI
	mov	#0x807F, &MACS
	mov.b	#0x89, &RESHI
	mov.b	#0xF1, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x817F, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xA487, &MPYS
	mov.b	#0x7E, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x903A, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x5557, &MACS
	mov.b	#0x7C, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xA5C4, &RESHI
	mov.b	&RESHI, r9
	nop
	mov	#0x617A, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xAAAB, &MPY
	mov.b	#0x60, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov.b	#0x60, &RESHI
	mov.b	&RESHI, r9
	nop
	mov.b	#0x03, &MACS
	mov.b	#0x7B, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x80B7, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xD630, &RESHI
	mov	#0x26CD, &MACS
	mov.b	#0x8F, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x80C1, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov.b	&RESHI, r9
	nop
	mov.b	#0x03, &RESLO
	mov.b	#0xEA, &RESHI
	mov	#0xDC02, &MACS
	mov.b	#0xC0, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xB2F1, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov.b	&RESHI, r9
	nop
	mov	#0x007F, &MPYS
	mov	#0xB60D, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x8195, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x42FF, &MACS
	mov	#0x8709, &RESHI
	mov.b	#0x7C, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x8069, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x203F, &MACS
	mov.b	#0x46, &RESHI
	mov.b	#0xA4, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x82E9, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x301F, &MACS
	mov	#0x7840, &RESHI
	mov.b	#0xB1, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x8453, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0xAF07, &MACS
	mov.b	#0xB0, &RESHI
	mov	#0x006A, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x90C6, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x420F, &MACS
	mov	#0x8C71, &RESHI
	mov.b	#0xD1, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x8899, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x8002, &RESHI
	mov	#0xFFF5, &MACS
	mov.b	#0xB2, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x8079, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov.b	&SUMEXT, r9
	nop
	mov	#0x80C9, &RESLO
	mov.b	#0x91, &MPY
	mov	#0xE38B, &MACS
	mov	#0x409C, &MAC
	mov	#0x0001, &MPYS
	mov	#0x614F, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov.b	#0xAB, &RESHI
	mov	#0xBEDD, &RESHI
	mov.b	#0x01, &MPYS
	mov.b	#0xA4, &OP2
	mov &RESLO,  R10
	mov &RESHI,  R11
	mov &SUMEXT, R12
	nop
	nop
	nop
	nop
	mov	#0x98FB, &RESHI
	mov.b	#0xCD, &MAC
	mov.b	&SUMEXT, r9
	nop
	nop
	
	        /* --------------    8-BIT RD/WR ACCESS OPERANDS   --------------- */

	mov   #0x1234,  &MPY
	mov   &MPY,     r10
	mov.b #0xab,    &MPY
	mov   &MPY,     r11
	nop
	mov   #0x0001,  r15
	nop

	mov   #0x5678,  &MPYS
	mov   &MPYS,    r10
	mov.b #0xbc,    &MPYS
	mov   &MPYS,    r11
	nop
	mov   #0x0002,  r15
	nop

	mov   #0x9abc,  &MAC
	mov   &MAC,     r10
	mov.b #0xde,    &MAC
	mov   &MAC,     r11
	nop
	mov   #0x0003,  r15
	nop

	mov   #0xdef0,  &MACS
	mov   &MACS,    r10
	mov.b #0xed,    &MACS
	mov   &MACS,    r11
	nop
	mov   #0x0004,  r15
	nop

	mov   #0x4321,  &OP2
	mov   &OP2,     r10
	mov.b #0xdc,    &OP2
	mov   &OP2,     r11
	nop
	mov   #0x0005,  r15
	nop

	mov   #0x8765,  &RESLO
	mov   &RESLO,   r10
	mov.b #0xcb,    &RESLO
	mov   &RESLO,   r11
	nop
	mov   #0x0006,  r15
	nop

	mov   #0xcba9,  &RESHI
	mov   &RESHI,   r10
	mov.b #0xba,    &RESHI
	mov   &RESHI,   r11
	nop
	

 /* -------   NMI             ------ */

        mov   #0x1000, r15

        ;; NMI feature is verified in the NMI.S43 test

        mov   #0x1001, r15


        /* -------   WATCHDOG        ------ */

        mov   #0x2000, r15

        ;; WATCHDOG feature is verified in the WDT_*.S43 tests
        mov   #0x5a90, &WDTCTL    ;# Enable interval mode & disable timer

        mov   #0x2001, r15


        /* -------   READ/WRITE IFG1       ------ */

        mov   #0x3000, r15

        mov   &IFG1,   r10
        mov   #0x3001, r15

        mov   #0x5555, &IFG1
        mov   &IFG1,   r10
        mov   #0x3002, r15

        mov   #0xAAAA, &IFG1
        mov   &IFG1,   r10
        mov   #0x3003, r15

        mov.b #0x55,   &IFG1
        mov.b &IFG1,   r10
        mov   #0x3004, r15

        mov.b #0xAA,    &IFG1_HI
        mov.b &IFG1_HI, r10
        mov   #0x3005,  r15
 mov   #0x0000, &IFG1
        mov   &IFG1,   r10
        mov   #0x3006, r15


        /* -------   READ/WRITE IE1         ------ */

        mov   #0x4000, r15

        mov   &IE1,    r10
        mov   #0x4001, r15

        mov   #0x5555, &IE1
        mov   &IE1,    r10
        mov   #0x4002, r15

        mov   #0xAAAA, &IE1
        mov   &IE1,    r10
        mov   #0x4003, r15

        mov.b #0x55,   &IE1
        mov.b &IE1,    r10
        mov   #0x4004, r15

        mov.b #0xAA,    &IE1_HI
        mov.b &IE1_HI,  r10
        mov   #0x4005,  r15

        mov   #0x0000, &IE1
        mov   &IE1,    r10
        mov   #0x4006, r15


        /* -------   READ/WRITE CPU_ID     ------ */

        mov   #0x5000, r15

        mov   &CPU_ID_LO, r10
        mov   &CPU_ID_HI, r11
        mov   #0x5001, r15

        mov   0x5554,     &CPU_ID_LO
 mov   0xAAAA,     &CPU_ID_HI
        mov   &CPU_ID_LO, r10
        mov   &CPU_ID_HI, r11
        mov   #0x5002, r15

        mov   0xAAAA,     &CPU_ID_LO
        mov   0x5554,     &CPU_ID_HI
        mov   &CPU_ID_LO, r10
        mov   &CPU_ID_HI, r11
        mov   #0x5003, r15


        /* -------   READ/WRITE CPU_NR     ------ */

        mov   #0x6000, r15

        mov   &CPU_NR, r10
        mov   #0x6001, r15

        mov   0x5554,  &CPU_NR
        mov   &CPU_NR, r10
        mov   #0x6002, r15

        mov   0xAAAA,  &CPU_NR
        mov   &CPU_NR, r10
        mov   #0x6003, r15



 /* -------------- TEST INSTRUCTION IN WORD MODE ------------------- */


        # Addressing mode: Rn
        #------------------------

        mov     #0x0001, r2        ;# Test 1
        mov     #0x7332, r4
        rra          r4            ;# RRA ({r4=0x7332}  => {r4=0x3999, C=0})
        mov          r2, r5

        mov     #0x0001, r2        ;# Test 2
        mov     #0x7333, r6
        rra          r6            ;# RRA ({r6=0x7333}  => {r6=0x3999, C=1})
        mov          r2, r7

        mov     #0x0000, r2        ;# Test 3
        mov     #0x8332, r8
        rra          r8            ;# RRA ({r9=0x8332}  => {r9=0xc199, C=0})
        mov          r2, r9

        mov     #0x0000, r2        ;# Test 4
        mov     #0x8333, r10
        rra         r10            ;# RRA ({r10=0x8333} => {r10=0xc199, C=1})
        mov          r2, r11

        mov     #0x1000, r15


        # Addressing mode: @Rn
        #------------------------

        mov     #0x0001, r2        ;# Test 1
        mov     #0x7332, &DMEM_200
        mov   #DMEM_200, r4
        mov     #0xaaaa, &DMEM_202
        rra         @r4            ;# RRA ({mem00=0x7332}  => {mem00=0x3999, C=0})
        mov          r2, r5

        mov     #0x0001, r2        ;# Test 2
 mov     #0x7333, &DMEM_202
        mov   #DMEM_202, r6
        mov     #0xaaaa, &DMEM_204
        rra         @r6            ;# RRA ({mem01=0x7333}  => {mem01=0x3999, C=1})
        mov          r2, r7

        mov     #0x0000, r2        ;# Test 3
        mov     #0x8332, &DMEM_204
        mov   #DMEM_204, r8
        mov     #0xaaaa, &DMEM_206
        rra         @r8            ;# RRA ({mem02=0x8332}  => {mem02=0xc199, C=0})
        mov          r2, r9

        mov     #0x0000, r2        ;# Test 4
        mov     #0x8333, &DMEM_206
        mov   #DMEM_206, r10
        mov     #0xaaaa, &DMEM_208
        rra        @r10            ;# RRA ({mem03=0x8333}  => {mem03=0xc199, C=1})
        mov          r2, r11

        mov     #0x2000, r15


        # Addressing mode: @Rn+
        #------------------------

        mov     #0x0001, r2        ;# Test 1
        mov     #0x7332, &DMEM_208
        mov   #DMEM_208, r4
        mov     #0xaaaa, &DMEM_20A
        rra        @r4+            ;# RRA ({mem04=0x7332}  => {mem04=0x3999, C=0})
        mov          r2, r5

        mov     #0x0001, r2        ;# Test 2
        mov     #0x7333, &DMEM_20A
        mov   #DMEM_20A, r6
        mov     #0xaaaa, &DMEM_20C
rra        @r6+            ;# RRA ({mem05=0x7333}  => {mem05=0x3999, C=1})
        mov          r2, r7

        mov     #0x0000, r2        ;# Test 3
        mov     #0x8332, &DMEM_20C
        mov   #DMEM_20C, r8
        mov     #0xaaaa, &DMEM_20E
        rra        @r8+            ;# RRA ({mem06=0x8332}  => {mem06=0xc199, C=0})
        mov          r2, r9

        mov     #0x0000, r2        ;# Test 4
        mov     #0x8333, &DMEM_20E
        mov   #DMEM_20E, r10
        mov     #0xaaaa, &DMEM_210
        rra       @r10+            ;# RRA ({mem07=0x8333}  => {mem07=0xc199, C=1})
        mov          r2, r11

        mov     #0x3000, r15


        # Addressing mode: X(Rn)
        #------------------------

        mov     #0x0001, r2        ;# Test 1
        mov     #0x7332, &DMEM_210
        mov   #DMEM_200, r4
        mov     #0xaaaa, &DMEM_212
        rra       16(r4)            ;# RRA ({mem08=0x7332}  => {mem08=0x3999, C=0})
        mov          r2, r5

        mov     #0x0001, r2        ;# Test 2
        mov     #0x7333, &DMEM_212
        mov   #DMEM_200, r6
        mov     #0xaaaa, &DMEM_214
        rra       18(r6)            ;# RRA ({mem09=0x7333}  => {mem09=0x3999, C=1})
        mov          r2, r7
 mov     #0x0000, r2        ;# Test 3
        mov     #0x8332, &DMEM_214
        mov   #DMEM_200, r8
        mov     #0xaaaa, &DMEM_216
        rra       20(r8)            ;# RRA ({mem0a=0x8332}  => {mem0a=0xc199, C=0})
        mov          r2, r9

        mov     #0x0000, r2        ;# Test 4
        mov     #0x8333, &DMEM_216
        mov   #DMEM_200, r10
        mov     #0xaaaa, &DMEM_218
        rra      22(r10)            ;# RRA ({mem0b=0x8333}  => {mem0b=0xc199, C=1})
        mov          r2, r11

        mov     #0x4000, r15


        # Addressing mode: EDE
        #------------------------
.set   EDE_218,  DMEM_218+PMEM_EDE_LENGTH
.set   EDE_21A,  DMEM_21A+PMEM_EDE_LENGTH
.set   EDE_21C,  DMEM_21C+PMEM_EDE_LENGTH
.set   EDE_21E,  DMEM_21E+PMEM_EDE_LENGTH

        mov     #0x0001, r2        ;# Test 1
        mov     #0x7332, &DMEM_218
        mov     #0xaaaa, &DMEM_21A
        rra     EDE_218            ;# RRA ({mem0c=0x7332}  => {mem0c=0x3999, C=0})
        mov          r2, r5

        mov     #0x0001, r2        ;# Test 2
        mov     #0x7333, &DMEM_21A
        mov     #0xaaaa, &DMEM_21C
        rra     EDE_21A            ;# RRA ({mem0d=0x7333}  => {mem0d=0x3999, C=1})
        mov          r2, r7

        mov     #0x0000, r2        ;# Test 3
        mov     #0x8332, &DMEM_21C
 mov     #0xaaaa, &DMEM_21E
        rra     EDE_21C            ;# RRA ({mem0e=0x8332}  => {mem0e=0xc199, C=0})
        mov          r2, r9

        mov     #0x0000, r2        ;# Test 4
        mov     #0x8333, &DMEM_21E
        mov     #0xaaaa, &DMEM_220
        rra     EDE_21E            ;# RRA ({mem0f=0x8333}  => {mem0f=0xc199, C=1})
        mov          r2, r11

        mov     #0x5000, r15


        # Addressing mode: &EDE
        #------------------------
.set   aEDE_220,  DMEM_220
.set   aEDE_222,  DMEM_222
.set   aEDE_224,  DMEM_224
.set   aEDE_226,  DMEM_226

        mov     #0x0001, r2        ;# Test 1
        mov     #0x7332, &DMEM_220
        mov     #0xaaaa, &DMEM_222
        rra   &aEDE_220            ;# RRA ({mem10=0x7332}  => {mem10=0x3999, C=0})
        mov          r2, r5

        mov     #0x0001, r2        ;# Test 2
        mov     #0x7333, &DMEM_222
        mov     #0xaaaa, &DMEM_224
        rra   &aEDE_222            ;# RRA ({mem11=0x7333}  => {mem11=0x3999, C=1})
        mov          r2, r7

        mov     #0x0000, r2        ;# Test 3
        mov     #0x8332, &DMEM_224
        mov     #0xaaaa, &DMEM_226
        rra   &aEDE_224            ;# RRA ({mem12=0x8332}  => {mem12=0xc199, C=0})
        mov          r2, r9
 mov     #0x0000, r2        ;# Test 4
        mov     #0x8333, &DMEM_226
        mov     #0xaaaa, &DMEM_228
        rra   &aEDE_226            ;# RRA ({mem13=0x8333}  => {mem13=0xc199, C=1})
        mov          r2, r11

        mov     #0x6000, r15


        /* ----------------------- CLEAR MEMORY --------------------------- */
        mov     #0x0015, r4
        mov   #DMEM_200, r5
clear_mem_loop2:
        clr    0(r5)
        incd     r5
        dec      r4
        jnz     clear_mem_loop2

        mov     #0x7000, r15


        /* -------------- TEST INSTRUCTION IN BYTE MODE ------------------- */

        # Addressing mode: Rn
        #------------------------

        mov     #0x0001, r2    ;# Test 1
        mov     #0xff72, r4
        rra.b        r4        ;# RRA.B ({r4=0x32}  => {r4=0x39, C=0})
        mov          r2, r5

        mov     #0x0001, r2    ;# Test 2
        mov     #0xff73, r6
        rra.b        r6        ;# RRA.B ({r6=0x33}  => {r6=0x39, C=1})
        mov          r2, r7

        mov     #0x0000, r2    ;# Test 3
        mov     #0xf082, r8
        rra.b        r8        ;# RRA.B ({r9=0x32}  => {r9=0xc1, C=0})
 mov          r2, r9

        mov     #0x0000, r2    ;# Test 4
        mov     #0xf083, r10
        rra.b       r10        ;# RRA.B ({r10=0x33} => {r10=0xc1, C=1})
        mov          r2, r11

        mov     #0x8000, r15


        # Addressing mode: @Rn (Low Byte)
        #---------------------------------

        mov     #0x0001, r2        ;# Test 1: Low Byte
        mov     #0x2572, &DMEM_200
        mov   #DMEM_200, r4
        mov     #0xaaaa, &DMEM_202
        rra.b       @r4            ;# RRA.B ({mem00=0x2572}  => {mem00=0x2539, C=0})
        mov          r2, r5

        mov     #0x0001, r2        ;# Test 2: Low Byte
        mov     #0x2573, &DMEM_202
        mov   #DMEM_202, r6
        mov     #0xaaaa, &DMEM_204
        rra.b       @r6            ;# RRA.B ({mem01=0x2573}  => {mem01=0x2539, C=1})
        mov          r2, r7

        mov     #0x0000, r2        ;# Test 3: Low Byte
        mov     #0x2582, &DMEM_204
        mov   #DMEM_204, r8
        mov     #0xaaaa, &DMEM_206
        rra.b       @r8            ;# RRA.B ({mem02=0x2582}  => {mem02=0x25c1, C=0})
        mov          r2, r9

        mov     #0x0000, r2        ;# Test 4: Low Byte
        mov     #0x2583, &DMEM_206
        mov   #DMEM_206, r10
        mov     #0xaaaa, &DMEM_208
 rra.b      @r10            ;# RRA.B ({mem03=0x2583}  => {mem03=0x25c1, C=1})
        mov          r2, r11

        mov     #0x9000, r15

        # Addressing mode: @Rn (High Byte)
        #---------------------------------

        mov     #0x0001, r2        ;# Test 1: High Byte
        mov     #0x7225, &DMEM_208
        mov   #DMEM_209, r4
        mov     #0xaaaa, &DMEM_20A
        rra.b       @r4            ;# RRA.B ({mem04=0x7225}  => {mem04=0x3925, C=0})
        mov          r2, r6

        mov     #0x0001, r2        ;# Test 2: High Byte
        mov     #0x7325, &DMEM_20A
        mov   #DMEM_20B, r6
        mov     #0xaaaa, &DMEM_20C
        rra.b       @r6            ;# RRA.B ({mem05=0x7325}  => {mem05=0x3925, C=1})
        mov          r2, r8

        mov     #0x0000, r2        ;# Test 3: High Byte
        mov     #0x8225, &DMEM_20C
        mov   #DMEM_20D, r8
        mov     #0xaaaa, &DMEM_20E
        rra.b       @r8            ;# RRA.B ({mem06=0x8225}  => {mem06=0xc125, C=0})
        mov          r2, r10

        mov     #0x0000, r2        ;# Test 4: High Byte
        mov     #0x8325, &DMEM_20E
        mov   #DMEM_20F, r10
        mov     #0xaaaa, &DMEM_210
        rra.b      @r10            ;# RRA.B ({mem07=0x8325}  => {mem07=0xc125, C=1})
        mov          r2, r11
 mov     #0x9001, r15


        # Addressing mode: @Rn+ (Low Byte)
        #---------------------------------

        mov     #0x0001, r2        ;# Test 1: Low Byte
        mov     #0x2572, &DMEM_210
        mov   #DMEM_210, r4
        mov     #0xaaaa, &DMEM_212
        rra.b      @r4+            ;# RRA.B ({mem08=0x2582}  => {mem08=0x2539, C=0})
        mov          r2, r5

        mov     #0x0001, r2        ;# Test 2: Low Byte
        mov     #0x2573, &DMEM_212
        mov   #DMEM_212, r6
        mov     #0xaaaa, &DMEM_214
        rra.b      @r6+            ;# RRA.B ({mem09=0x2583}  => {mem09=0x2539, C=1})
        mov          r2, r7

        mov     #0x0000, r2        ;# Test 3: Low Byte
        mov     #0x2582, &DMEM_214
        mov   #DMEM_214, r8
        mov     #0xaaaa, &DMEM_216
        rra.b      @r8+            ;# RRA.B ({mem0a=0x2572}  => {mem0a=0x25c1, C=0})
        mov          r2, r9

        mov     #0x0000, r2        ;# Test 4: Low Byte
        mov     #0x2583, &DMEM_216
        mov   #DMEM_216, r10
        mov     #0xaaaa, &DMEM_218
        rra.b     @r10+            ;# RRA.B ({mem0b=0x2573}  => {mem0b=0x25c1, C=1})
        mov          r2, r11

        mov     #0xA000, r15

        # Addressing mode: @Rn+ (High Byte)
        #-----------------------------------
 mov     #0x0001, r2        ;# Test 1: High Byte
        mov     #0x7225, &DMEM_218
        mov   #DMEM_219, r4
        mov     #0xaaaa, &DMEM_21A
        rra.b      @r4+            ;# RRA.B ({mem0c=0x7225}  => {mem0c=0x3925, C=0})
        mov          r2, r6

        mov     #0x0001, r2        ;# Test 2: High Byte
        mov     #0x7325, &DMEM_21A
        mov   #DMEM_21B, r6
        mov     #0xaaaa, &DMEM_21C
        rra.b      @r6+            ;# RRA.B ({mem0d=0x7325}  => {mem0d=0x3925, C=1})
        mov          r2, r8

        mov     #0x0000, r2        ;# Test 3: High Byte
        mov     #0x8225, &DMEM_21C
        mov   #DMEM_21D, r8
        mov     #0xaaaa, &DMEM_21E
        rra.b      @r8+            ;# RRA.B ({mem0e=0x8225}  => {mem0e=0xc125, C=0})
        mov          r2, r10

        mov     #0x0000, r2        ;# Test 4: High Byte
        mov     #0x8325, &DMEM_21E
        mov   #DMEM_21F, r10
        mov     #0xaaaa, &DMEM_220
        rra.b     @r10+            ;# RRA.B ({mem0f=0x8325}  => {mem0f=0xc125, C=1})
        mov          r2, r11

        mov     #0xA001, r15


        # Addressing mode: X(Rn) (Low Byte)
        #-----------------------------------

        mov     #0x0001, r2        ;# Test 1
        mov     #0x2572, &DMEM_220
        mov   #DMEM_200, r4
        mov     #0xaaaa, &DMEM_222
 rra.b     32(r4)           ;# RRA ({mem10=0x2572}  => {mem10=0x2539, C=0})
        mov          r2, r5

        mov     #0x0001, r2        ;# Test 2
        mov     #0x2573, &DMEM_222
        mov   #DMEM_200, r6
        mov     #0xaaaa, &DMEM_224
        rra.b     34(r6)           ;# RRA ({mem11=0x2573}  => {mem11=0x2539, C=1})
        mov          r2, r7

        mov     #0x0000, r2        ;# Test 3
        mov     #0x2582, &DMEM_224
        mov   #DMEM_200, r8
        mov     #0xaaaa, &DMEM_226
        rra.b     36(r8)           ;# RRA ({mem12=0x2582}  => {mem12=0x25c1, C=0})
        mov          r2, r9

        mov     #0x0000, r2        ;# Test 4
        mov     #0x2583, &DMEM_226
        mov   #DMEM_200, r10
        mov     #0xaaaa, &DMEM_228
        rra.b    38(r10)           ;# RRA ({mem13=0x2583}  => {mem13=0x25c1, C=1})
        mov          r2, r11

        mov     #0xB000, r15

        # Addressing mode: X(Rn) (High Byte)
        #------------------------------------

        mov     #0x0001, r2        ;# Test 1
        mov     #0x7225, &DMEM_228
        mov   #DMEM_200, r4
        mov     #0xaaaa, &DMEM_22A
        rra.b     41(r4)           ;# RRA ({mem14=0x7225}  => {mem14=0x3925, C=0})
        mov          r2, r5

        mov     #0x0001, r2        ;# Test 2
 mov     #0x7325, &DMEM_22A
        mov   #DMEM_200, r6
        mov     #0xaaaa, &DMEM_22C
        rra.b     43(r6)           ;# RRA ({mem15=0x7325}  => {mem15=0x3925, C=1})
        mov          r2, r7

        mov     #0x0000, r2        ;# Test 3
        mov     #0x8225, &DMEM_22C
        mov   #DMEM_200, r8
        mov     #0xaaaa, &DMEM_22E
        rra.b     45(r8)           ;# RRA ({mem16=0x8225}  => {mem16=0xc125, C=0})
        mov          r2, r9

        mov     #0x0000, r2        ;# Test 4
        mov     #0x8325, &DMEM_22E
        mov   #DMEM_200, r10
        mov     #0xaaaa, &DMEM_230
        rra.b    47(r10)           ;# RRA ({mem17=0x8325}  => {mem17=0xc125, C=1})
        mov          r2, r11

        mov     #0xB001, r15


        # Addressing mode: EDE (Low Byte)
        #---------------------------------
.set   EDE_230,  DMEM_230+PMEM_EDE_LENGTH
.set   EDE_232,  DMEM_232+PMEM_EDE_LENGTH
.set   EDE_234,  DMEM_234+PMEM_EDE_LENGTH
.set   EDE_236,  DMEM_236+PMEM_EDE_LENGTH

        mov     #0x0001, r2        ;# Test 1
        mov     #0x2572, &DMEM_230
        mov     #0xaaaa, &DMEM_232
        rra.b   EDE_230            ;# RRA ({mem18=0x2572}  => {mem18=0x2539, C=0})
        mov          r2, r5

        mov     #0x0001, r2        ;# Test 2
        mov     #0x2573, &DMEM_232
        mov     #0xaaaa, &DMEM_234
 rra.b   EDE_232            ;# RRA ({mem19=0x2573}  => {mem19=0x2539, C=1})
        mov          r2, r7

        mov     #0x0000, r2        ;# Test 3
        mov     #0x2582, &DMEM_234
        mov     #0xaaaa, &DMEM_236
        rra.b   EDE_234            ;# RRA ({mem1a=0x2582}  => {mem1a=0x25c1, C=0})
        mov          r2, r9

        mov     #0x0000, r2        ;# Test 4
        mov     #0x2583, &DMEM_236
        mov     #0xaaaa, &DMEM_238
        rra.b   EDE_236            ;# RRA ({mem1b=0x2583}  => {mem1b=0x25c1, C=1})
        mov          r2, r11

        mov     #0xC000, r15

        # Addressing mode: EDE (High Byte)
        #----------------------------------
.set   EDE_239,  DMEM_239+PMEM_EDE_LENGTH
.set   EDE_23B,  DMEM_23B+PMEM_EDE_LENGTH
.set   EDE_23D,  DMEM_23D+PMEM_EDE_LENGTH
.set   EDE_23F,  DMEM_23F+PMEM_EDE_LENGTH

        mov     #0x0001, r2        ;# Test 1
        mov     #0x7225, &DMEM_238
        mov     #0xaaaa, &DMEM_23A
        rra.b   EDE_239            ;# RRA ({mem1c=0x7225}  => {mem1c=0x3925, C=0})
        mov          r2, r5

        mov     #0x0001, r2        ;# Test 2
        mov     #0x7325, &DMEM_23A
        mov     #0xaaaa, &DMEM_23C
        rra.b   EDE_23B            ;# RRA ({mem1d=0x7325}  => {mem1d=0x3925, C=1})
        mov          r2, r7

        mov     #0x0000, r2        ;# Test 3
 mov     #0x8225, &DMEM_23C
        mov     #0xaaaa, &DMEM_23E
        rra.b   EDE_23D            ;# RRA ({mem1e=0x8225}  => {mem1e=0xc125, C=0})
        mov          r2, r9

        mov     #0x0000, r2        ;# Test 4
        mov     #0x8325, &DMEM_23E
        mov     #0xaaaa, &DMEM_240
        rra.b   EDE_23F            ;# RRA ({mem1f=0x8325}  => {mem1f=0xc125, C=1})
        mov          r2, r11

        mov     #0xC001, r15


        # Addressing mode: &EDE (Low Byte)
        #----------------------------------
.set   aEDE_240,  DMEM_240
.set   aEDE_242,  DMEM_242
.set   aEDE_244,  DMEM_244
.set   aEDE_246,  DMEM_246

        mov     #0x0001, r2        ;# Test 1
        mov     #0x2572, &DMEM_240
        mov     #0xaaaa, &DMEM_242
        rra.b &aEDE_240            ;# RRA ({mem20=0x2572}  => {mem20=0x2539, C=0})
        mov          r2, r5

        mov     #0x0001, r2        ;# Test 2
        mov     #0x2573, &DMEM_242
        mov     #0xaaaa, &DMEM_244
        rra.b &aEDE_242            ;# RRA ({mem21=0x2573}  => {mem21=0x2539, C=1})
        mov          r2, r7

        mov     #0x0000, r2        ;# Test 3
        mov     #0x2582, &DMEM_244
        mov     #0xaaaa, &DMEM_246
        rra.b &aEDE_244            ;# RRA ({mem22=0x2582}  => {mem22=0x25c1, C=0})
 mov          r2, r9

        mov     #0x0000, r2        ;# Test 4
        mov     #0x2583, &DMEM_246
        mov     #0xaaaa, &DMEM_248
        rra.b &aEDE_246            ;# RRA ({mem23=0x2583}  => {mem23=0x25c1, C=1})
        mov          r2, r11

        mov     #0xD000, r15

        # Addressing mode: &EDE (High Byte)
        #-----------------------------------
.set   aEDE_249,  DMEM_249
.set   aEDE_24B,  DMEM_24B
.set   aEDE_24D,  DMEM_24D
.set   aEDE_24F,  DMEM_24F

        mov     #0x0001, r2        ;# Test 1
        mov     #0x7225, &DMEM_248
        mov     #0xaaaa, &DMEM_24A
        rra.b &aEDE_249            ;# RRA ({mem24=0x7225}  => {mem24=0x3925, C=0})
        mov          r2, r5

        mov     #0x0001, r2        ;# Test 2
        mov     #0x7325, &DMEM_24A
        mov     #0xaaaa, &DMEM_24C
        rra.b &aEDE_24B            ;# RRA ({mem25=0x7325}  => {mem25=0x3925, C=1})
        mov          r2, r7

        mov     #0x0000, r2        ;# Test 3
        mov     #0x8225, &DMEM_24C
        mov     #0xaaaa, &DMEM_24E
        rra.b &aEDE_24D            ;# RRA ({mem26=0x8225}  => {mem26=0xc125, C=0})
        mov          r2, r9

        mov     #0x0000, r2        ;# Test 4
        mov     #0x8325, &DMEM_24E
        mov     #0xaaaa, &DMEM_250
 rra.b &aEDE_24F            ;# RRA ({mem27=0x8325}  => {mem27=0xc125, C=1})
        mov          r2, r11

        mov     #0xD001, r15




 /* -------------- TEST INSTRUCTION IN WORD MODE ------------------- */


        # Addressing mode: Rn
        #------------------------

        mov     #0x0000, r2        ;# Test 1
        mov     #0x3332, r4
        rrc          r4            ;# RRC ({C=0, r4=0x3332}  => {r4=0x1999, C=0})
        mov          r2, r5

        mov     #0x0000, r2        ;# Test 2
        mov     #0x3333, r6
        rrc          r6            ;# RRC ({C=0, r6=0x3333}  => {r6=0x1999, C=1})
        mov          r2, r7

        mov     #0x0001, r2        ;# Test 3
        mov     #0x3332, r8
        rrc          r8            ;# RRC ({C=1, r9=0x3332}  => {r9=0x9999, C=0})
        mov          r2, r9

        mov     #0x0001, r2        ;# Test 4
        mov     #0x3333, r10
        rrc         r10            ;# RRC ({C=1, r10=0x3333} => {r10=0x9999, C=1})
        mov          r2, r11

        mov     #0x1000, r15


        # Addressing mode: @Rn
        #------------------------

        mov     #0x0000, r2        ;# Test 1
 mov     #0x3332, &DMEM_200
        mov   #DMEM_200, r4
        mov     #0xaaaa, &DMEM_202
        rrc         @r4            ;# RRC ({C=0, mem00=0x3332}  => {mem00=0x1999, C=0})
        mov          r2, r5

        mov     #0x0000, r2        ;# Test 2
        mov     #0x3333, &DMEM_202
        mov   #DMEM_202, r6
        mov     #0xaaaa, &DMEM_204
        rrc         @r6            ;# RRC ({C=0, mem01=0x3333}  => {mem01=0x1999, C=1})
        mov          r2, r7

        mov     #0x0001, r2        ;# Test 3
        mov     #0x3332, &DMEM_204
        mov   #DMEM_204, r8
        mov     #0xaaaa, &DMEM_206
        rrc         @r8            ;# RRC ({C=1, mem02=0x3332}  => {mem02=0x9999, C=0})
        mov          r2, r9

        mov     #0x0001, r2        ;# Test 4
        mov     #0x3333, &DMEM_206
        mov   #DMEM_206, r10
        mov     #0xaaaa, &DMEM_208
        rrc        @r10            ;# RRC ({C=1, mem03=0x3333}  => {mem03=0x9999, C=1})
        mov          r2, r11

        mov     #0x2000, r15


        # Addressing mode: @Rn+
        #------------------------

        mov     #0x0000, r2        ;# Test 1
        mov     #0x3332, &DMEM_208
        mov   #DMEM_208, r4
        mov     #0xaaaa, &DMEM_20A
 rrc        @r4+            ;# RRC ({C=0, mem04=0x3332}  => {mem04=0x1999, C=0})
        mov          r2, r5

        mov     #0x0000, r2        ;# Test 2
        mov     #0x3333, &DMEM_20A
        mov   #DMEM_20A, r6
        mov     #0xaaaa, &DMEM_20C
        rrc        @r6+            ;# RRC ({C=0, mem05=0x3333}  => {mem05=0x1999, C=1})
        mov          r2, r7

        mov     #0x0001, r2        ;# Test 3
        mov     #0x3332, &DMEM_20C
        mov   #DMEM_20C, r8
        mov     #0xaaaa, &DMEM_20E
        rrc        @r8+            ;# RRC ({C=1, mem06=0x3332}  => {mem06=0x9999, C=0})
        mov          r2, r9

        mov     #0x0001, r2        ;# Test 4
        mov     #0x3333, &DMEM_20E
        mov   #DMEM_20E, r10
        mov     #0xaaaa, &DMEM_210
        rrc       @r10+            ;# RRC ({C=1, mem07=0x3333}  => {mem07=0x9999, C=1})
        mov          r2, r11

        mov     #0x3000, r15


        # Addressing mode: X(Rn)
        #------------------------

        mov     #0x0000, r2        ;# Test 1
        mov     #0x3332, &DMEM_210
        mov   #DMEM_200, r4
        mov     #0xaaaa, &DMEM_212
        rrc       16(r4)            ;# RRC ({C=0, mem08=0x3332}  => {mem08=0x1999, C=0})
        mov          r2, r5
 mov     #0x0000, r2        ;# Test 2
        mov     #0x3333, &DMEM_212
        mov   #DMEM_200, r6
        mov     #0xaaaa, &DMEM_214
        rrc       18(r6)            ;# RRC ({C=0, mem09=0x3333}  => {mem09=0x1999, C=1})
        mov          r2, r7

        mov     #0x0001, r2        ;# Test 3
        mov     #0x3332, &DMEM_214
        mov   #DMEM_200, r8
        mov     #0xaaaa, &DMEM_216
        rrc       20(r8)            ;# RRC ({C=1, mem0a=0x3332}  => {mem0a=0x9999, C=0})
        mov          r2, r9

        mov     #0x0001, r2        ;# Test 4
        mov     #0x3333, &DMEM_216
        mov   #DMEM_200, r10
        mov     #0xaaaa, &DMEM_218
        rrc      22(r10)            ;# RRC ({C=1, mem0b=0x3333}  => {mem0b=0x9999, C=1})
        mov          r2, r11

        mov     #0x4000, r15


        # Addressing mode: EDE
        #------------------------
.set   EDE_218,  DMEM_218+PMEM_EDE_LENGTH
.set   EDE_21A,  DMEM_21A+PMEM_EDE_LENGTH
.set   EDE_21C,  DMEM_21C+PMEM_EDE_LENGTH
.set   EDE_21E,  DMEM_21E+PMEM_EDE_LENGTH

        mov     #0x0000, r2        ;# Test 1
        mov     #0x3332, &DMEM_218
        mov     #0xaaaa, &DMEM_21A
        rrc     EDE_218            ;# RRC ({C=0, mem0c=0x3332}  => {mem0c=0x1999, C=0})
        mov          r2, r5
 mov     #0x0000, r2        ;# Test 2
        mov     #0x3333, &DMEM_21A
        mov     #0xaaaa, &DMEM_21C
        rrc     EDE_21A            ;# RRC ({C=0, mem0d=0x3333}  => {mem0d=0x1999, C=1})
        mov          r2, r7

        mov     #0x0001, r2        ;# Test 3
        mov     #0x3332, &DMEM_21C
        mov     #0xaaaa, &DMEM_21E
        rrc     EDE_21C            ;# RRC ({C=1, mem0e=0x3332}  => {mem0e=0x9999, C=0})
        mov          r2, r9

        mov     #0x0001, r2        ;# Test 4
        mov     #0x3333, &DMEM_21E
        mov     #0xaaaa, &DMEM_220
        rrc     EDE_21E            ;# RRC ({C=1, mem0f=0x3333}  => {mem0f=0x9999, C=1})
        mov          r2, r11

        mov     #0x5000, r15


        # Addressing mode: &EDE
        #------------------------
.set   aEDE_220,  DMEM_220
.set   aEDE_222,  DMEM_222
.set   aEDE_224,  DMEM_224
.set   aEDE_226,  DMEM_226

        mov     #0x0000, r2        ;# Test 1
        mov     #0x3332, &DMEM_220
        mov     #0xaaaa, &DMEM_222
        rrc   &aEDE_220            ;# RRC ({C=0, mem10=0x3332}  => {mem10=0x1999, C=0})
        mov          r2, r5

        mov     #0x0000, r2        ;# Test 2
        mov     #0x3333, &DMEM_222
        mov     #0xaaaa, &DMEM_224
 rrc   &aEDE_222            ;# RRC ({C=0, mem11=0x3333}  => {mem11=0x1999, C=1})
        mov          r2, r7

        mov     #0x0001, r2        ;# Test 3
        mov     #0x3332, &DMEM_224
        mov     #0xaaaa, &DMEM_226
        rrc   &aEDE_224            ;# RRC ({C=1, mem12=0x3332}  => {mem12=0x9999, C=0})
        mov          r2, r9

        mov     #0x0001, r2        ;# Test 4
        mov     #0x3333, &DMEM_226
        mov     #0xaaaa, &DMEM_228
        rrc   &aEDE_226            ;# RRC ({C=1, mem13=0x3333}  => {mem13=0x9999, C=1})
        mov          r2, r11

        mov     #0x6000, r15


        /* ----------------------- CLEAR MEMORY --------------------------- */
        mov     #0x0015, r4
        mov   #DMEM_200, r5
clear_mem_loop1:
        clr    0(r5)
        incd     r5
        dec      r4
        jnz     clear_mem_loop1

        mov     #0x7000, r15


        /* -------------- TEST INSTRUCTION IN BYTE MODE ------------------- */

        # Addressing mode: Rn
        #------------------------

        mov     #0x0000, r2    ;# Test 1
        mov     #0xff32, r4
 rrc.b        r4        ;# RRC.B ({C=0, r4=0x32}  => {r4=0x19, C=0})
        mov          r2, r5

        mov     #0x0000, r2    ;# Test 2
        mov     #0xff33, r6
        rrc.b        r6        ;# RRC.B ({C=0, r6=0x33}  => {r6=0x19, C=1})
        mov          r2, r7

        mov     #0x0001, r2    ;# Test 3
        mov     #0xf032, r8
        rrc.b        r8        ;# RRC.B ({C=1, r9=0x32}  => {r9=0x99, C=0})
        mov          r2, r9

        mov     #0x0001, r2    ;# Test 4
        mov     #0xf033, r10
        rrc.b       r10        ;# RRC.B ({C=1, r10=0x33} => {r10=0x99, C=1})
        mov          r2, r11

        mov     #0x8000, r15


        # Addressing mode: @Rn (Low Byte)
        #---------------------------------

        mov     #0x0000, r2        ;# Test 1: Low Byte
        mov     #0x2532, &DMEM_200
        mov   #DMEM_200, r4
        mov     #0xaaaa, &DMEM_202
        rrc.b       @r4            ;# RRC.B ({C=0, mem00=0x2532}  => {mem00=0x2519, C=0})
        mov          r2, r5

        mov     #0x0000, r2        ;# Test 2: Low Byte
        mov     #0x2533, &DMEM_202
        mov   #DMEM_202, r6
        mov     #0xaaaa, &DMEM_204
        rrc.b       @r6            ;# RRC.B ({C=0, mem01=0x2533}  => {mem01=0x2519, C=1})
        mov          r2, r7

        mov     #0x0001, r2        ;# Test 3: Low Byte
        mov     #0x2532, &DMEM_204
 mov   #DMEM_204, r8
        mov     #0xaaaa, &DMEM_206
        rrc.b       @r8            ;# RRC.B ({C=1, mem02=0x2532}  => {mem02=0x2599, C=0})
        mov          r2, r9

        mov     #0x0001, r2        ;# Test 4: Low Byte
        mov     #0x2533, &DMEM_206
        mov   #DMEM_206, r10
        mov     #0xaaaa, &DMEM_208
        rrc.b      @r10            ;# RRC.B ({C=1, mem03=0x2533}  => {mem03=0x2599, C=1})
        mov          r2, r11

        mov     #0x9000, r15

        # Addressing mode: @Rn (High Byte)
        #---------------------------------

        mov     #0x0000, r2        ;# Test 1: High Byte
        mov     #0x3225, &DMEM_208
        mov   #DMEM_209, r4
        mov     #0xaaaa, &DMEM_20A
        rrc.b       @r4            ;# RRC.B ({C=0, mem04=0x3225}  => {mem04=0x1925, C=0})
        mov          r2, r6

        mov     #0x0000, r2        ;# Test 2: High Byte
        mov     #0x3325, &DMEM_20A
        mov   #DMEM_20B, r6
        mov     #0xaaaa, &DMEM_20C
        rrc.b       @r6            ;# RRC.B ({C=0, mem05=0x3325}  => {mem05=0x1925, C=1})
        mov          r2, r8

        mov     #0x0001, r2        ;# Test 3: High Byte
        mov     #0x3225, &DMEM_20C
        mov   #DMEM_20D, r8
        mov     #0xaaaa, &DMEM_20E
        rrc.b       @r8            ;# RRC.B ({C=1, mem06=0x3225}  => {mem06=0x9925, C=0})
        mov          r2, r10
 mov     #0x0001, r2        ;# Test 4: High Byte
        mov     #0x3325, &DMEM_20E
        mov   #DMEM_20F, r10
        mov     #0xaaaa, &DMEM_210
        rrc.b      @r10            ;# RRC.B ({C=1, mem07=0x3325}  => {mem07=0x9925, C=1})
        mov          r2, r11

        mov     #0x9001, r15


        # Addressing mode: @Rn+ (Low Byte)
        #---------------------------------

        mov     #0x0000, r2        ;# Test 1: Low Byte
        mov     #0x2532, &DMEM_210
        mov   #DMEM_210, r4
        mov     #0xaaaa, &DMEM_212
        rrc.b      @r4+            ;# RRC.B ({C=0, mem08=0x2532}  => {mem08=0x2519, C=0})
        mov          r2, r5

        mov     #0x0000, r2        ;# Test 2: Low Byte
        mov     #0x2533, &DMEM_212
        mov   #DMEM_212, r6
        mov     #0xaaaa, &DMEM_214
        rrc.b      @r6+            ;# RRC.B ({C=0, mem09=0x2533}  => {mem09=0x2519, C=1})
        mov          r2, r7

        mov     #0x0001, r2        ;# Test 3: Low Byte
        mov     #0x2532, &DMEM_214
        mov   #DMEM_214, r8
        mov     #0xaaaa, &DMEM_216
        rrc.b      @r8+            ;# RRC.B ({C=1, mem0a=0x2532}  => {mem0a=0x2599, C=0})
        mov          r2, r9

        mov     #0x0001, r2        ;# Test 4: Low Byte
        mov     #0x2533, &DMEM_216
        mov   #DMEM_216, r10
        mov     #0xaaaa, &DMEM_218
 rrc.b     @r10+            ;# RRC.B ({C=1, mem0b=0x2533}  => {mem0b=0x2599, C=1})
        mov          r2, r11

        mov     #0xA000, r15

        # Addressing mode: @Rn+ (High Byte)
        #-----------------------------------

        mov     #0x0000, r2        ;# Test 1: High Byte
        mov     #0x3225, &DMEM_218
        mov   #DMEM_219, r4
        mov     #0xaaaa, &DMEM_21A
        rrc.b      @r4+            ;# RRC.B ({C=0, mem0c=0x3225}  => {mem0c=0x1925, C=0})
        mov          r2, r6

        mov     #0x0000, r2        ;# Test 2: High Byte
        mov     #0x3325, &DMEM_21A
        mov   #DMEM_21B, r6
        mov     #0xaaaa, &DMEM_21C
        rrc.b      @r6+            ;# RRC.B ({C=0, mem0d=0x3325}  => {mem0d=0x1925, C=1})
        mov          r2, r8

        mov     #0x0001, r2        ;# Test 3: High Byte
        mov     #0x3225, &DMEM_21C
        mov   #DMEM_21D, r8
        mov     #0xaaaa, &DMEM_21E
        rrc.b      @r8+            ;# RRC.B ({C=1, mem0e=0x3225}  => {mem0e=0x9925, C=0})
        mov          r2, r10

        mov     #0x0001, r2        ;# Test 4: High Byte
        mov     #0x3325, &DMEM_21E
        mov   #DMEM_21F, r10
        mov     #0xaaaa, &DMEM_220
        rrc.b     @r10+            ;# RRC.B ({C=1, mem0f=0x3325}  => {mem0f=0x9925, C=1})
        mov          r2, r11

        mov     #0xA001, r15
 # Addressing mode: EDE (Low Byte)
        #---------------------------------
.set   EDE_230,  DMEM_230+PMEM_EDE_LENGTH
.set   EDE_232,  DMEM_232+PMEM_EDE_LENGTH
.set   EDE_234,  DMEM_234+PMEM_EDE_LENGTH
.set   EDE_236,  DMEM_236+PMEM_EDE_LENGTH

        mov     #0x0000, r2        ;# Test 1
        mov     #0x2532, &DMEM_230
        mov     #0xaaaa, &DMEM_232
        rrc.b   EDE_230            ;# RRC ({C=0, mem18=0x2532}  => {mem18=0x2519, C=0})
        mov          r2, r5

        mov     #0x0000, r2        ;# Test 2
        mov     #0x2533, &DMEM_232
        mov     #0xaaaa, &DMEM_234
        rrc.b   EDE_232            ;# RRC ({C=0, mem19=0x2533}  => {mem19=0x2519, C=1})
        mov          r2, r7

        mov     #0x0001, r2        ;# Test 3
        mov     #0x2532, &DMEM_234
        mov     #0xaaaa, &DMEM_236
        rrc.b   EDE_234            ;# RRC ({C=1, mem1a=0x2532}  => {mem1a=0x2599, C=0})
        mov          r2, r9

        mov     #0x0001, r2        ;# Test 4
        mov     #0x2533, &DMEM_236
        mov     #0xaaaa, &DMEM_238
        rrc.b   EDE_236            ;# RRC ({C=1, mem1b=0x2533}  => {mem1b=0x2599, C=1})
        mov          r2, r11

        mov     #0xC000, r15

        # Addressing mode: EDE (High Byte)
        #----------------------------------
.set   EDE_239,  DMEM_239+PMEM_EDE_LENGTH
.set   EDE_23B,  DMEM_23B+PMEM_EDE_LENGTH
.set   EDE_23D,  DMEM_23D+PMEM_EDE_LENGTH
.set   EDE_23F,  DMEM_23F+PMEM_EDE_LENGTH
 mov     #0x0000, r2        ;# Test 1
        mov     #0x3225, &DMEM_238
        mov     #0xaaaa, &DMEM_23A
        rrc.b   EDE_239            ;# RRC ({C=0, mem1c=0x3225}  => {mem1c=0x1925, C=0})
        mov          r2, r5

        mov     #0x0000, r2        ;# Test 2
        mov     #0x3325, &DMEM_23A
        mov     #0xaaaa, &DMEM_23C
        rrc.b   EDE_23B            ;# RRC ({C=0, mem1d=0x3325}  => {mem1d=0x1925, C=1})
        mov          r2, r7

        mov     #0x0001, r2        ;# Test 3
        mov     #0x3225, &DMEM_23C
        mov     #0xaaaa, &DMEM_23E
        rrc.b   EDE_23D            ;# RRC ({C=1, mem1e=0x3225}  => {mem1e=0x9925, C=0})
        mov          r2, r9

        mov     #0x0001, r2        ;# Test 4
        mov     #0x3325, &DMEM_23E
        mov     #0xaaaa, &DMEM_240
        rrc.b   EDE_23F            ;# RRC ({C=1, mem1f=0x3325}  => {mem1f=0x9925, C=1})
        mov          r2, r11

        mov     #0xC001, r15


        # Addressing mode: &EDE (Low Byte)
        #----------------------------------
.set   aEDE_240,  DMEM_240
.set   aEDE_242,  DMEM_242
.set   aEDE_244,  DMEM_244
.set   aEDE_246,  DMEM_246

        mov     #0x0000, r2        ;# Test 1
        mov     #0x2532, &DMEM_240
        mov     #0xaaaa, &DMEM_242
        rrc.b &aEDE_240            ;# RRC ({C=0, mem20=0x2532}  => {mem20=0x2519, C=0})
 mov          r2, r5

        mov     #0x0000, r2        ;# Test 2
        mov     #0x2533, &DMEM_242
        mov     #0xaaaa, &DMEM_244
        rrc.b &aEDE_242            ;# RRC ({C=0, mem21=0x2533}  => {mem21=0x2519, C=1})
        mov          r2, r7

        mov     #0x0001, r2        ;# Test 3
        mov     #0x2532, &DMEM_244
        mov     #0xaaaa, &DMEM_246
        rrc.b &aEDE_244            ;# RRC ({C=1, mem22=0x2532}  => {mem22=0x2599, C=0})
        mov          r2, r9

        mov     #0x0001, r2        ;# Test 4
        mov     #0x2533, &DMEM_246
        mov     #0xaaaa, &DMEM_248
        rrc.b &aEDE_246            ;# RRC ({C=1, mem23=0x2533}  => {mem23=0x2599, C=1})
        mov          r2, r11

        mov     #0xD000, r15

        # Addressing mode: &EDE (High Byte)
        #-----------------------------------
.set   aEDE_249,  DMEM_249
.set   aEDE_24B,  DMEM_24B
.set   aEDE_24D,  DMEM_24D
.set   aEDE_24F,  DMEM_24F

        mov     #0x0000, r2        ;# Test 1
        mov     #0x3225, &DMEM_248
        mov     #0xaaaa, &DMEM_24A
        rrc.b &aEDE_249            ;# RRC ({C=0, mem24=0x3225}  => {mem24=0x1925, C=0})
        mov          r2, r5

        mov     #0x0000, r2        ;# Test 2
        mov     #0x3325, &DMEM_24A
        mov     #0xaaaa, &DMEM_24C

 rrc.b &aEDE_24B            ;# RRC ({C=0, mem25=0x3325}  => {mem25=0x1925, C=1})
        mov          r2, r7

        mov     #0x0001, r2        ;# Test 3
        mov     #0x3225, &DMEM_24C
        mov     #0xaaaa, &DMEM_24E
        rrc.b &aEDE_24D            ;# RRC ({C=1, mem26=0x3225}  => {mem26=0x9925, C=0})
        mov          r2, r9

        mov     #0x0001, r2        ;# Test 4
        mov     #0x3325, &DMEM_24E
        mov     #0xaaaa, &DMEM_250
        rrc.b &aEDE_24F            ;# RRC ({C=1, mem27=0x3325}  => {mem27=0x9925, C=1})
        mov          r2, r11

        mov     #0xD001, r15






 /* -------------- TEST INSTRUCTION IN WORD MODE ------------------- */


        # Addressing mode: Rn
        #------------------------

        mov     #0x0100, r2        ;# Test 1
        mov     #0x7524, r4
        sxt          r4            ;# SXT (r4=0x7524  =>  r4=0x0024)
        mov          r2, r5

        mov     #0x0100, r2        ;# Test 2
        mov     #0x1cb6, r6
        sxt          r6            ;# SXT (r6=0x1cb6  =>  r6=0xffb6)
        mov          r2, r7

        mov     #0x1000, r15


        # Addressing mode: @Rn
        #------------------------

        mov     #0x0100, r2        ;# Test 1
        mov     #0x7524, &DMEM_200
        mov   #DMEM_200, r4
        mov     #0xaaaa, &DMEM_202
        sxt         @r4            ;# SXT (mem00=0x7524  => {mem00=0x0024)
        mov          r2, r5

        mov     #0x0100, r2        ;# Test 2
        mov     #0x1cb6, &DMEM_202
        mov   #DMEM_202, r6
        mov     #0xaaaa, &DMEM_204
        sxt         @r6            ;# SXT (mem01=0x1cb6  => {mem01=0xffb6)
        mov          r2, r7

        mov     #0x2000, r15


        # Addressing mode: @Rn+
        #------------------------
 mov     #0x0100, r2        ;# Test 1
        mov     #0x7524, &DMEM_208
        mov   #DMEM_208, r4
        mov     #0xaaaa, &DMEM_20A
        sxt        @r4+            ;# SXT (mem04=0x7524  => {mem04=0x0024)
        mov          r2, r5

        mov     #0x0100, r2        ;# Test 2
        mov     #0x1cb6, &DMEM_20A
        mov   #DMEM_20A, r6
        mov     #0xaaaa, &DMEM_20C
        sxt        @r6+            ;# SXT (mem05=0x1cb6  => {mem05=0xffb6)
        mov          r2, r7

        mov     #0x3000, r15


        # Addressing mode: X(Rn)
        #------------------------

        mov     #0x0100, r2        ;# Test 1
        mov     #0x7524, &DMEM_210
        mov   #DMEM_200, r4
        mov     #0xaaaa, &DMEM_212
        sxt       16(r4)            ;# SXT (mem08=0x7524  => {mem08=0x0024)
        mov          r2, r5

        mov     #0x0100, r2        ;# Test 2
        mov     #0x1cb6, &DMEM_212
        mov   #DMEM_200, r6
        mov     #0xaaaa, &DMEM_214
        sxt       18(r6)            ;# SXT (mem09=0x1cb6  => {mem09=0xffb6)
        mov          r2, r7

        mov     #0x4000, r15


 # Addressing mode: EDE
        #------------------------
.set   EDE_218,  DMEM_218+PMEM_EDE_LENGTH
.set   EDE_21A,  DMEM_21A+PMEM_EDE_LENGTH
.set   EDE_21C,  DMEM_21C+PMEM_EDE_LENGTH
.set   EDE_21E,  DMEM_21E+PMEM_EDE_LENGTH

        mov     #0x0100, r2        ;# Test 1
        mov     #0x7524, &DMEM_218
        mov     #0xaaaa, &DMEM_21A
        sxt     EDE_218            ;# SXT (mem0c=0x7524  => {mem0c=0x0024)
        mov          r2, r5

        mov     #0x0100, r2        ;# Test 2
        mov     #0x1cb6, &DMEM_21A
        mov     #0xaaaa, &DMEM_21C
        sxt     EDE_21A            ;# SXT (mem0d=0x1cb6  => {mem0d=0xffb6)
        mov          r2, r7

        mov     #0x5000, r15


        # Addressing mode: &EDE
        #------------------------
.set   aEDE_220,  DMEM_220
.set   aEDE_222,  DMEM_222
.set   aEDE_224,  DMEM_224
.set   aEDE_226,  DMEM_226

        mov     #0x0100, r2        ;# Test 1
        mov     #0x7524, &DMEM_220
        mov     #0xaaaa, &DMEM_222
        sxt   &aEDE_220            ;# SXT (mem10=0x7524  => {mem10=0x0024)
        mov          r2, r5

        mov     #0x0100, r2        ;# Test 2
        mov     #0x1cb6, &DMEM_222
        mov     #0xaaaa, &DMEM_224
        sxt   &aEDE_222            ;# SXT (mem11=0x1cb6  => {mem11=0xffb6)
        mov          r2, r7

        mov     #0x6000, r15



 # Addressing mode: Rn
        #------------------------

        mov     #0x0102, r2        ;# Test 1
        mov     #0x7524, r4
        swpb         r4            ;# SWPB (r4=0x7524  =>  r4=0x2475)
        mov          r2, r5

        mov     #0x0005, r2        ;# Test 2
        mov     #0x1cb6, r6
        swpb         r6            ;# SWPB (r6=0x1cb6  =>  r6=0xb61c)
        mov          r2, r7

        mov     #0x1000, r15


        # Addressing mode: @Rn
        #------------------------

        mov     #0x0102, r2        ;# Test 1
        mov     #0x7524, &DMEM_200
        mov   #DMEM_200, r4
        mov     #0xaaaa, &DMEM_202
        swpb        @r4            ;# SWPB (mem00=0x7524  => {mem00=0x2475)
        mov          r2, r5

        mov     #0x0005, r2        ;# Test 2
        mov     #0x1cb6, &DMEM_202
        mov   #DMEM_202, r6
        mov     #0xaaaa, &DMEM_204
        swpb        @r6            ;# SWPB (mem01=0x1cb6  => {mem01=0xb61c)
        mov          r2, r7

        mov     #0x2000, r15
 # Addressing mode: @Rn+
        #------------------------

        mov     #0x0102, r2        ;# Test 1
        mov     #0x7524, &DMEM_208
        mov   #DMEM_208, r4
        mov     #0xaaaa, &DMEM_20A
        swpb       @r4+            ;# SWPB (mem04=0x7524  => {mem04=0x2475)
        mov          r2, r5

        mov     #0x0005, r2        ;# Test 2
        mov     #0x1cb6, &DMEM_20A
        mov   #DMEM_20A, r6
        mov     #0xaaaa, &DMEM_20C
        swpb       @r6+            ;# SWPB (mem05=0x1cb6  => {mem05=0xb61c)
        mov          r2, r7

        mov     #0x3000, r15


        # Addressing mode: X(Rn)
        #------------------------

        mov     #0x0102, r2        ;# Test 1
        mov     #0x7524, &DMEM_210
        mov   #DMEM_200, r4
        mov     #0xaaaa, &DMEM_212
        swpb      16(r4)            ;# SWPB (mem08=0x7524  => {mem08=0x2475)
        mov          r2, r5

        mov     #0x0005, r2        ;# Test 2
        mov     #0x1cb6, &DMEM_212
        mov   #DMEM_200, r6
        mov     #0xaaaa, &DMEM_214
        swpb      18(r6)            ;# SWPB (mem09=0x1cb6  => {mem09=0xb61c)
        mov          r2, r7

        mov     #0x4000, r15


        # Addressing mode: EDE
        #------------------------
.set   EDE_218,  DMEM_218+PMEM_EDE_LENGTH
.set   EDE_21A,  DMEM_21A+PMEM_EDE_LENGTH
.set   EDE_21C,  DMEM_21C+PMEM_EDE_LENGTH
.set   EDE_21E,  DMEM_21E+PMEM_EDE_LENGTH

        mov     #0x0102, r2        ;# Test 1
        mov     #0x7524, &DMEM_218
        mov     #0xaaaa, &DMEM_21A
        swpb    EDE_218            ;# SWPB (mem0c=0x7524  => {mem0c=0x2475)
        mov          r2, r5

        mov     #0x0005, r2        ;# Test 2
        mov     #0x1cb6, &DMEM_21A
        mov     #0xaaaa, &DMEM_21C
        swpb    EDE_21A            ;# SWPB (mem0d=0x1cb6  => {mem0d=0xb61c)
        mov          r2, r7

        mov     #0x5000, r15


        # Addressing mode: &EDE
        #------------------------
.set   aEDE_220,  DMEM_220
.set   aEDE_222,  DMEM_222
.set   aEDE_224,  DMEM_224
.set   aEDE_226,  DMEM_226

        mov     #0x0102, r2        ;# Test 1
        mov     #0x7524, &DMEM_220
        mov     #0xaaaa, &DMEM_222
        swpb  &aEDE_220            ;# SWPB (mem10=0x7524  => {mem10=0x2475)
        mov          r2, r5

        mov     #0x0005, r2        ;# Test 2
        mov     #0x1cb6, &DMEM_222
        mov     #0xaaaa, &DMEM_224
        swpb  &aEDE_222            ;# SWPB (mem11=0x1cb6  => {mem11=0xb61c)
        mov          r2, r7

        mov     #0x6000, r15



 ;---------March algorithm, for register file---------
        /* ---------------------- 1st round --------------------- */
        mov     #0xffff, r1
        mov     #0xffff, r2
        mov     #0xffff, r3
        mov     #0xffff, r4
        mov     #0xffff, r5
        mov     #0xffff, r6
        mov     #0xffff, r7
        mov     #0x0000, r8
        mov     #0x0000, r9
        mov     #0x0000, r10
        mov     #0x0000, r11
        mov     #0x0000, r12
        mov     #0x0000, r13
        mov     #0x0000, r14

        mov     #0x0000, r15


        /* --------------- 2nd round------------------ */
        mov     #0x0000, r1
        mov     #0x0000, r2
        mov     #0x0000, r3
        mov     #0x0000, r4
        mov     #0x0000, r5
        mov     #0x0000, r6
        mov     #0x0000, r7

        mov     #0xffff, r8
        mov     #0xffff, r9
        mov     #0xffff, r10
        mov     #0xffff, r11
        mov     #0xffff, r12
        mov     #0xffff, r13
        mov     #0xffff, r14

        mov     #0xffff, r15

        /* ---------------------- TEST for logic operation ------------------- */

        /* ----------------------         AND              ------------------- */

        and             r1, r1          ;0 and 0 r1 is 0
        and             r14, r2         ;1 and 0, r2 is 0
        and             r3, r8          ;0 and 1 r8 is 0
        and             r14, r14        ;1 and 1 r14 is 1

        /* ----------------------         OR              ------------------- */

        bis      r3, r3          ;0 or 0, r3 is 0
        bis      r4, r13         ;0 or 1, r13 is 1
        bis      r9, r7          ;1 or 0, r7 is 1
        bis      r12, r12        ;1 or 1, r12 is 1

        /* ----------------------         XOR              ------------------- */
        xor     r4, r4           ;0 xor 0, r4 is0
        xor     r9, r9           ;1 xor 1  r9 is 0
        xor     r6, r11,         ;0 xor 1, r11 is 1
        xor     r10, r6,         ;1 xor 0, r6 is 1

        /* ----------------------         NOT              ------------------- */
        mov     #0xffff, r5
        bic    r1, r5            ; (not 0) and 1, r5 is 1
        bic    r10, r10          ; (not 1) and 1, r10 is 0


        mov   #0x0001, r15



  /* -------------- TEST INSTRUCTION IN WORD MODE ------------------- */

        # Initialization
        #------------------------

        mov     #0x0020, r4        ;# Initialize RAM
        mov   #DMEM_230, r5
clear_mem_loop:
        clr    0(r5)
        incd     r5
        dec      r4
        jnz     clear_mem_loop


        mov   #DMEM_252, r1        ;# Initialize stack pointer


        mov     #0x1000, r15


        # Addressing mode: @Rn
        #------------------------

        mov     #data_aRn_0x1234, r4
        push                     @r4           ;# PUSH (0x1234  =>  @=0x0250)

        mov     #data_aRn_0x5678, r6
        push                     @r6           ;# PUSH (0x5678  =>  @=0x024E)

        mov              #0x2000, r15


        # Addressing mode: @Rn+
        #------------------------

        mov     #data_aRni_0x9abc, r4
        push                      @r4+         ;# PUSH (0x9abc  =>  @=0x024C)
        push                      @r4+         ;# PUSH (0xdef0  =>  @=0x024A)

        mov     #0x3000, r15
 # Addressing mode: X(Rn)
        #------------------------

        mov     #data_xRn_0x0fed, r4
        push                   26(r4)          ;# PUSH (0x0fed  =>  @=0x0248)
        push                   28(r4)          ;# PUSH (0xcba9  =>  @=0x0246)

        mov     #0x4000, r15


        # Addressing mode: EDE
        #------------------------
.set   EDE_21E,  DMEM_21E
.set   EDE_220,  DMEM_220

        push    data_EDE_0x8765                ;# PUSH (0x8765  =>  @=0x0244)
        push    data_EDE_0x4321                ;# PUSH (0x4321  =>  @=0x0242)

        mov     #0x5000, r15


        # Addressing mode: &EDE
        #------------------------
.set   aEDE_222,  DMEM_222
.set   aEDE_224,  DMEM_224

        push  &data_aEDE_0x1f2e                ;# PUSH (0x1f2e  =>  @=0x0240)
        push  &data_aEDE_0x3d4c                ;# PUSH (0x3d4c  =>  @=0x023E)

        mov     #0x6000, r15



   /* -------------- PORT 1: TEST RD/WR REGISTER ACCESS --------------- */

        mov.b #0xaa,  &P1IN          ; P1IN
        mov.b &P1IN,  &DMEM_200
        mov.b #0x55,  &P1IN
        mov.b &P1IN,  &DMEM_201

        mov.b #0xaa,  &P1OUT         ; P1OUT
        mov.b &P1OUT, &DMEM_202
        mov.b #0x55,  &P1OUT
        mov.b &P1OUT, &DMEM_203

        mov.b #0x5a,  &P1DIR         ; P1DIR
        mov.b &P1DIR, &DMEM_204
        mov.b #0xa5,  &P1DIR
        mov.b &P1DIR, &DMEM_205

        mov.b #0x55,  &P1IFG         ; P1IFG
        mov.b &P1IFG, &DMEM_206
        mov.b #0xaa,  &P1IFG
        mov.b &P1IFG, &DMEM_207

        mov.b #0xa5,  &P1IES         ; P1IES
        mov.b &P1IES, &DMEM_208
        mov.b #0x5a,  &P1IES
        mov.b &P1IES, &DMEM_209

        mov.b #0xaa,  &P1IE          ; P1IE
        mov.b &P1IE,  &DMEM_20A
        mov.b #0x55,  &P1IE
        mov.b &P1IE,  &DMEM_20B

        mov.b #0xcd,  &P1SEL         ; P1SEL
        mov.b &P1SEL, &DMEM_20C
        mov.b #0x32,  &P1SEL
        mov.b &P1SEL, &DMEM_20D
  mov.b #0x00,  &P1IN          ; Re-Initialize
        mov.b #0x00,  &P1OUT
        mov.b #0x00,  &P1DIR
        mov.b #0x00,  &P1IFG
        mov.b #0x00,  &P1IES
        mov.b #0x00,  &P1IE
        mov.b #0x00,  &P1SEL

        mov   #0x0001, r15


        /* -------------- PORT 2: TEST RD/WR REGISTER ACCESS --------------- */

        mov.b #0xaa,  &P2IN          ; P2IN
        mov.b &P2IN,  &DMEM_210
        mov.b #0x55,  &P2IN
        mov.b &P2IN,  &DMEM_211

        mov.b #0xaa,  &P2OUT         ; P2OUT
        mov.b &P2OUT, &DMEM_212
        mov.b #0x55,  &P2OUT
        mov.b &P2OUT, &DMEM_213

        mov.b #0x5a,  &P2DIR         ; P2DIR
        mov.b &P2DIR, &DMEM_214
        mov.b #0xa5,  &P2DIR
        mov.b &P2DIR, &DMEM_215

        mov.b #0x55,  &P2IFG         ; P2IFG
        mov.b &P2IFG, &DMEM_216
        mov.b #0xaa,  &P2IFG
        mov.b &P2IFG, &DMEM_217

        mov.b #0xa5,  &P2IES         ; P2IES
        mov.b &P2IES, &DMEM_218
        mov.b #0x5a,  &P2IES
        mov.b &P2IES, &DMEM_219

  mov.b #0xaa,  &P2IE          ; P2IE
        mov.b &P2IE,  &DMEM_21A
        mov.b #0x55,  &P2IE
        mov.b &P2IE,  &DMEM_21B

        mov.b #0xcd,  &P2SEL         ; P2SEL
        mov.b &P2SEL, &DMEM_21C
        mov.b #0x32,  &P2SEL
        mov.b &P2SEL, &DMEM_21D

        mov.b #0x00,  &P2IN          ; Re-Initialize
        mov.b #0x00,  &P2OUT
        mov.b #0x00,  &P2DIR
        mov.b #0x00,  &P2IFG
        mov.b #0x00,  &P2IES
        mov.b #0x00,  &P2IE
        mov.b #0x00,  &P2SEL

        mov   #0x0002, r15


        /* -------------- PORT 3: TEST RD/WR REGISTER ACCESS --------------- */

        mov.b #0xaa,  &P3IN          ; P3IN
        mov.b &P3IN,  &DMEM_220
        mov.b #0x55,  &P3IN
        mov.b &P3IN,  &DMEM_221

        mov.b #0xaa,  &P3OUT         ; P3OUT
        mov.b &P3OUT, &DMEM_222
        mov.b #0x55,  &P3OUT
        mov.b &P3OUT, &DMEM_223

        mov.b #0x5a,  &P3DIR         ; P3DIR
        mov.b &P3DIR, &DMEM_224
        mov.b #0xa5,  &P3DIR
        mov.b &P3DIR, &DMEM_225
  mov.b #0xcd,  &P3SEL         ; P3SEL
        mov.b &P3SEL, &DMEM_226
        mov.b #0x32,  &P3SEL
        mov.b &P3SEL, &DMEM_227

        mov.b #0x00,  &P3IN          ; Re-Initialize
        mov.b #0x00,  &P3OUT
        mov.b #0x00,  &P3DIR
        mov.b #0x00,  &P3SEL

        mov   #0x0003, r15


        /* -------------- PORT 4: TEST RD/WR REGISTER ACCESS --------------- */

        mov.b #0xaa,  &P4IN          ; P4IN
        mov.b &P4IN,  &DMEM_230
        mov.b #0x55,  &P4IN
        mov.b &P4IN,  &DMEM_231

        mov.b #0xaa,  &P4OUT         ; P4OUT
        mov.b &P4OUT, &DMEM_232
        mov.b #0x55,  &P4OUT
        mov.b &P4OUT, &DMEM_233

        mov.b #0x5a,  &P4DIR         ; P4DIR
        mov.b &P4DIR, &DMEM_234
        mov.b #0xa5,  &P4DIR
        mov.b &P4DIR, &DMEM_235

        mov.b #0xcd,  &P4SEL         ; P4SEL
        mov.b &P4SEL, &DMEM_236
        mov.b #0x32,  &P4SEL
        mov.b &P4SEL, &DMEM_237

        mov.b #0x00,  &P4IN          ; Re-Initialize
        mov.b #0x00,  &P4OUT
        mov.b #0x00,  &P4DIR
        mov.b #0x00,  &P4SEL
  mov   #0x0004, r15


        /* -------------- PORT 5: TEST RD/WR REGISTER ACCESS --------------- */

        mov.b #0xaa,  &P5IN          ; P5IN
        mov.b &P5IN,  &DMEM_240
        mov.b #0x55,  &P5IN
        mov.b &P5IN,  &DMEM_241

        mov.b #0xaa,  &P5OUT         ; P5OUT
        mov.b &P5OUT, &DMEM_242
        mov.b #0x55,  &P5OUT
        mov.b &P5OUT, &DMEM_243

        mov.b #0x5a,  &P5DIR         ; P5DIR
        mov.b &P5DIR, &DMEM_244
        mov.b #0xa5,  &P5DIR
        mov.b &P5DIR, &DMEM_245

        mov.b #0xcd,  &P5SEL         ; P5SEL
        mov.b &P5SEL, &DMEM_246
        mov.b #0x32,  &P5SEL
        mov.b &P5SEL, &DMEM_247

        mov.b #0x00,  &P5IN          ; Re-Initialize
        mov.b #0x00,  &P5OUT
        mov.b #0x00,  &P5DIR
        mov.b #0x00,  &P5SEL

        mov   #0x0005, r15


        /* -------------- PORT 6: TEST RD/WR REGISTER ACCESS --------------- */

        mov.b #0xaa,  &P6IN          ; P6IN
        mov.b &P6IN,  &DMEM_250
        mov.b #0x55,  &P6IN
        mov.b &P6IN,  &DMEM_251
 mov.b #0xaa,  &P6OUT         ; P6OUT
        mov.b &P6OUT, &DMEM_252
        mov.b #0x55,  &P6OUT
        mov.b &P6OUT, &DMEM_253

        mov.b #0x5a,  &P6DIR         ; P6DIR
        mov.b &P6DIR, &DMEM_254
        mov.b #0xa5,  &P6DIR
        mov.b &P6DIR, &DMEM_255

        mov.b #0xcd,  &P6SEL         ; P6SEL
        mov.b &P6SEL, &DMEM_256
        mov.b #0x32,  &P6SEL
        mov.b &P6SEL, &DMEM_257

        mov.b #0x00,  &P6IN          ; Re-Initialize
        mov.b #0x00,  &P6OUT
        mov.b #0x00,  &P6DIR
        mov.b #0x00,  &P6SEL

        mov   #0x0006, r15


        /* -------------- PORT 1: TEST I/O FUNCTIONALITY --------------- */

        mov     #DMEM_200, r15        ;# Test Input path
        nop
p1_din_loop:
        mov.b &P1IN,  0(r15)
        inc      r15
        cmp     #DMEM_208, r15
        jne     p1_din_loop


        mov.b #0x01,   &P1OUT       ; Test Output path
        mov   #0x1100, r15
p1_dout_loop:
        rla.b &P1OUT
        inc      r15
        cmp     #0x1107, r15
        jne     p1_dout_loop
  mov.b #0x01,   &P1DIR       ; Test Direction register
        mov   #0x1200, r15
p1_dir_loop:
        rla.b &P1DIR
        inc      r15
        cmp     #0x1207, r15
        jne     p1_dir_loop


        mov.b #0x01,   &P1SEL       ; Test Function Select register
        mov   #0x1300, r15
p1_sel_loop:
        rla.b &P1SEL
        inc      r15
        cmp     #0x1307, r15
        jne     p1_sel_loop


        mov.b #0x00,  &P1OUT        ; Re-Initialize
        mov.b #0x00,  &P1DIR
        mov.b #0x00,  &P1SEL


        /* -------------- PORT 2: TEST I/O FUNCTIONALITY --------------- */

        mov     #DMEM_210, r15        ;# Test Input path
        nop
p2_din_loop:
        mov.b &P2IN,  0(r15)
        inc      r15
        cmp     #DMEM_218, r15
        jne     p2_din_loop


        mov.b #0x01,   &P2OUT       ; Test Output path
        mov   #0x2100, r15
p2_dout_loop:
        rla.b &P2OUT
        inc      r15
        cmp     #0x2107, r15
        jne     p2_dout_loop
 mov.b #0x01,   &P2DIR       ; Test Direction register
        mov   #0x2200, r15
p2_dir_loop:
        rla.b &P2DIR
        inc      r15
        cmp     #0x2207, r15
        jne     p2_dir_loop


        mov.b #0x01,   &P2SEL       ; Test Function Select register
        mov   #0x2300, r15
p2_sel_loop:
        rla.b &P2SEL
        inc      r15
        cmp     #0x2307, r15
        jne     p2_sel_loop


        mov.b #0x00,  &P2OUT        ; Re-Initialize
        mov.b #0x00,  &P2DIR
        mov.b #0x00,  &P2SEL


        /* -------------- PORT 3: TEST I/O FUNCTIONALITY --------------- */

        mov     #DMEM_220, r15        ;# Test Input path
        nop
p3_din_loop:
        mov.b &P3IN,  0(r15)
        inc      r15
        cmp     #DMEM_228, r15
        jne     p3_din_loop
 mov.b #0x01,   &P3OUT       ; Test Output path
        mov   #0x3100, r15
p3_dout_loop:
        rla.b &P3OUT
        inc      r15
        cmp     #0x3107, r15
        jne     p3_dout_loop


        mov.b #0x01,   &P3DIR       ; Test Direction register
        mov   #0x3200, r15
p3_dir_loop:
        rla.b &P3DIR
        inc      r15
        cmp     #0x3207, r15
        jne     p3_dir_loop


        mov.b #0x01,   &P3SEL       ; Test Function Select register
        mov   #0x3300, r15
p3_sel_loop:
        rla.b &P3SEL
        inc      r15
        cmp     #0x3307, r15
        jne     p3_sel_loop


        mov.b #0x00,  &P3OUT        ; Re-Initialize
        mov.b #0x00,  &P3DIR
        mov.b #0x00,  &P3SEL


        /* -------------- PORT 4: TEST I/O FUNCTIONALITY --------------- */

        mov     #DMEM_230, r15        ;# Test Input path
        nop
p4_din_loop:
        mov.b &P4IN,  0(r15)
        inc      r15
        cmp     #DMEM_238, r15
        jne     p4_din_loop
 mov.b #0x01,   &P4OUT       ; Test Output path
        mov   #0x4100, r15
p4_dout_loop:
        rla.b &P4OUT
        inc      r15
        cmp     #0x4107, r15
        jne     p4_dout_loop


        mov.b #0x01,   &P4DIR       ; Test Direction register
        mov   #0x4200, r15
p4_dir_loop:
        rla.b &P4DIR
        inc      r15
        cmp     #0x4207, r15
        jne     p4_dir_loop


        mov.b #0x01,   &P4SEL       ; Test Function Select register
        mov   #0x4300, r15
p4_sel_loop:
        rla.b &P4SEL
        inc      r15
        cmp     #0x4307, r15
        jne     p4_sel_loop


        mov.b #0x00,  &P4OUT        ; Re-Initialize
        mov.b #0x00,  &P4DIR
        mov.b #0x00,  &P4SEL


        /* -------------- PORT 5: TEST I/O FUNCTIONALITY --------------- */

        mov     #DMEM_240, r15        ;# Test Input path
        nop
p5_din_loop:
        mov.b &P5IN,  0(r15)
        inc      r15
        cmp     #DMEM_248, r15
        jne     p5_din_loop

 mov.b #0x01,   &P5OUT       ; Test Output path
        mov   #0x5100, r15
p5_dout_loop:
        rla.b &P5OUT
        inc      r15
        cmp     #0x5107, r15
        jne     p5_dout_loop


        mov.b #0x01,   &P5DIR       ; Test Direction register
        mov   #0x5200, r15
p5_dir_loop:
        rla.b &P5DIR
        inc      r15
        cmp     #0x5207, r15
        jne     p5_dir_loop


        mov.b #0x01,   &P5SEL       ; Test Function Select register
        mov   #0x5300, r15
p5_sel_loop:
        rla.b &P5SEL
        inc      r15
        cmp     #0x5307, r15
        jne     p5_sel_loop


        mov.b #0x00,  &P5OUT        ; Re-Initialize
        mov.b #0x00,  &P5DIR
        mov.b #0x00,  &P5SEL


        /* -------------- PORT 6: TEST I/O FUNCTIONALITY --------------- */

        mov     #DMEM_250, r15        ;# Test Input path
        nop
p6_din_loop:
        mov.b &P6IN,  0(r15)
        inc      r15
        cmp     #DMEM_258, r15
        jne     p6_din_loop
 mov.b #0x01,   &P6OUT       ; Test Output path
        mov   #0x6100, r15
p6_dout_loop:
        rla.b &P6OUT
        inc      r15
        cmp     #0x6107, r15
        jne     p6_dout_loop


        mov.b #0x01,   &P6DIR       ; Test Direction register
        mov   #0x6200, r15
p6_dir_loop:
        rla.b &P6DIR
        inc      r15
        cmp     #0x6207, r15
        jne     p6_dir_loop


        mov.b #0x01,   &P6SEL       ; Test Function Select register
        mov   #0x6300, r15
p6_sel_loop:
        rla.b &P6SEL
        inc      r15
        cmp     #0x6307, r15
        jne     p6_sel_loop


        mov.b #0x00,  &P6OUT        ; Re-Initialize
        mov.b #0x00,  &P6DIR
        mov.b #0x00,  &P6SEL





 






       /* -------------- TEST INSTRUCTION WITH STANDARD REGISTERS AS ARGUMENT ------------------- */

        # Initialization
	#------------------------

	mov   #DMEM_252, r1        ;# Initialize stack pointer
	mov     #0x0000, r5        ;# Initialize R5


	mov     #0x1000, r15


        # Addressing mode: Rn
	#------------------------

	mov     #0x0000, r5
	mov  #TEST_ROUTINE_RN, r4
	mov     #0x5555, &0x0300
	call         r4            ;# CALL TEST_ROUTINE_RN

	mov     #0x2000, r15


        # Addressing mode: @Rn
	#------------------------

	mov   #DMEM_212, r4
	mov     #0x0000, r5
	mov   #TEST_ROUTINE_aRN, &DMEM_212
	mov     #0x5555, &DMEM_300
	call        @r4           ;# CALL TEST_ROUTINE_aRN

	mov     #0x3000, r15


        # Addressing mode: @Rn+
	#------------------------

	mov     #DMEM_216, r4
	mov     #0x0000, r5
	mov   #TEST_ROUTINE_aRNi, &DMEM_216
	mov     #0x5555, &DMEM_300
	call       @r4+           ;# CALL TEST_ROUTINE_aRNi

	mov     #0x4000, r15


        # Addressing mode: #N
	#------------------------

	mov     #0x0000, r5
	mov     #0x5555, &DMEM_300
	call    #TEST_ROUTINE_N   ;# CALL TEST_ROUTINE_N

	mov     #0x5000, r15


        # Addressing mode: X(Rn)
	#------------------------

	mov     #DMEM_200, r4
	mov     #0x0000, r5
	mov  #TEST_ROUTINE_xRN, &DMEM_21A
	mov     #0x5555, &DMEM_300
	call      26(r4)           ;# CALL TEST_ROUTINE_xRN

	mov     #0x6000, r15


        # Addressing mode: EDE
	#------------------------
.set   EDE_21E,  DMEM_21E+PMEM_EDE_LENGTH

	mov     #0x0000, r5
	mov  #TEST_ROUTINE_EDE, &DMEM_21E
	mov     #0x5555, &DMEM_300
	call    EDE_21E            ;# CALL TEST_ROUTINE_EDE

	mov     #0x7000, r15


        # Addressing mode: &EDE
	#------------------------
.set   aEDE_220,  DMEM_220

	mov     #0x0000, r5
	mov  #TEST_ROUTINE_aEDE, &aEDE_220
	mov     #0x5555, &DMEM_300
	call  &aEDE_220            ;# CALL TEST_ROUTINE_aEDE

	mov     #0x8000, r15


        /* -------------- TEST INSTRUCTION WITH SR AS ARGUMENT ------------------- */


        # Addressing mode: SR
        #------------------------

        mov #0x0000, r5
	nop
        #call    r1                 ;# NOT VALID BECAUSE IT JUMPS IN THE DATA MEMORY
	nop			    ;# WHICH IS NOT EXECUTABLE

        mov     #0x9000, r15


        # Addressing mode: @SR
        #------------------------

	mov  #DMEM_252, r1        ;# Initialize stack pointer
	push #TEST_ROUTINE_RN
	push #TEST_ROUTINE_aRN
	push #TEST_ROUTINE_aRNi
        mov  r1, r13		  ; backup stack for later
	push #TEST_ROUTINE_N
	push #TEST_ROUTINE_xRN
	push #TEST_ROUTINE_EDE
	push #TEST_ROUTINE_aEDE

	nop
        mov     r13, r1
        mov #0x0000, r5
 	nop
        call    @r1                ;# CALL #TEST_ROUTINE_N (r5 = 0xabcd)
	nop

        mov     #0xa000, r15


        # Addressing mode: @SR+
        #------------------------

	mov  #DMEM_252, r1        ;# Initialize stack pointer
	push #TEST_ROUTINE_SPECIAL_aRNi
	push #TEST_ROUTINE_RN
	push #TEST_ROUTINE_aRN
	push #TEST_ROUTINE_aRNi
        mov  r1, r13		  ; backup stack for later
	push #TEST_ROUTINE_N
	push #TEST_ROUTINE_xRN
	push #TEST_ROUTINE_EDE
	push #TEST_ROUTINE_aEDE

 	nop
	mov     r13, r1
        mov #0x0000, r5
	nop
        call    @r1+               ;# CALL #TEST_ROUTINE_N (this has a funny behavior of nested call backward until SPECIAL_aRNi is reached)
	nop

        mov     #0xb000, r15


        # Addressing mode: x(SR)
        #------------------------

	mov  #DMEM_252, r1        ;# Initialize stack pointer
	push #TEST_ROUTINE_RN
	push #TEST_ROUTINE_aRN
	push #TEST_ROUTINE_aRNi
	push #TEST_ROUTINE_N
	push #TEST_ROUTINE_xRN
	push #TEST_ROUTINE_EDE
	push #TEST_ROUTINE_aEDE
	nop
        mov #0x0000, r5
        mov #0x0000, r6
        mov #0x0000, r7
	call   4(r1)            ;# CALL #TEST_ROUTINE_EDE  (r7 = 0x2345)
        mov      r5, r7
        mov #0x0000, r5
	call   6(r1)            ;# CALL #TEST_ROUTINE_xRN  (r6 = 0xef01)
        mov      r5, r6
        mov #0x0000, r5
	call  10(r1)            ;# CALL #TEST_ROUTINE_aRNi (r5 = 0x9abc)
	nop

	mov     #0xc000, r15

		/* -------------- two-op_xor ------------------- */
		
        /* -------------- TEST INSTRUCTION IN WORD MODE ------------------- */

	mov     #0x0000, r2
	mov     #0x3333, r4
	mov     #0x8888, r5
	xor          r4, r5        ;# XOR r5^r4 (0x8888^0x3333=0xbbbb)

	mov     #0x0001, r2
	mov     #0x5555, r4
	mov     #0x9999, r6
	xor          r4, r6        ;# XOR r6^r4 (0x9999^0x5555=0xcccc)

	mov     #0x1000, r15


        /* -------------- TEST INSTRUCTION IN BYTE MODE ------------------- */

	mov     #0x0000, r2
	mov     #0x3333, r4
	mov     #0x8888, r5
	xor.b        r4, r5        ;# XOR r5^r4 (0x0088^0x0033=0x00bb)

	mov     #0x0001, r2
	mov     #0x5555, r4
	mov     #0x9999, r6
	xor.b        r4, r6        ;# XOR r6^r4 (0x0099^0x0055=0x00cc)

	mov     #0x2000, r15


        /* ------------------ TEST FLAGS IN WORD MODE ---------------------- */

	mov     #0x0000, r2        ;# V=0, N=0, Z=0, C=1
	mov     #0x0aaa, r4        ;#
	mov     #0x0666, r5        ;#
	xor          r4, r5        ;# XOR r5^r4 (0x0666^0x0aaa=0x0ccc)
	mov     #0x3000, r15

	mov     #0x0000, r2        ;# V=0, N=0, Z=1, C=0
	mov     #0x0444, r4        ;#
	mov     #0x0444, r5        ;#
	xor          r4, r5        ;# XOR r5^r4 (0x0444^0x0444=0x0000)
	mov     #0x3001, r15

	mov     #0x0000, r2        ;# V=0, N=1, Z=0, C=1
	mov     #0x8aaa, r4        ;#
	mov     #0x0666, r5        ;#
	xor          r4, r5        ;# XOR r5^r4 (0x8aaa^0x0666=0x8ccc)
	mov     #0x3002, r15

	mov     #0x0000, r2        ;# V=1, N=0, Z=0, C=1
	mov     #0x8aaa, r4        ;#
	mov     #0x8666, r5        ;#
	xor          r4, r5        ;# XOR r5^r4 (0x8aaa^0x8666=0x0ccc)
	mov     #0x3003, r15

	mov     #0x0000, r2        ;# V=1, N=0, Z=1, C=0
	mov     #0x8444, r4        ;#
	mov     #0x8444, r5        ;#
	xor          r4, r5        ;# XOR r5^r4 (0x8444^0x8444=0x0000)
	mov     #0x3004, r15


        /* ------------------ TEST FLAGS IN BYTE MODE --------------------- */

	mov     #0x0000, r2        ;# V=0, N=0, Z=0, C=1
	mov     #0x660a, r4        ;#
	mov     #0xaa06, r5        ;#
	xor.b        r4, r5        ;# XOR r5^r4 (0x0006^0x000a=0x000c)
	mov     #0x4000, r15

	mov     #0x0000, r2        ;# V=0, N=0, Z=1, C=0
	mov     #0x6604, r4        ;#
	mov     #0xaa04, r5        ;#
	xor.b        r4, r5        ;# XOR r5^r4 (0x0004^0x0004=0x0000)
	mov     #0x4001, r15

	mov     #0x0000, r2        ;# V=0, N=1, Z=0, C=1
	mov     #0x558a, r4        ;#
	mov     #0x0006, r5        ;#
	xor.b        r4, r5        ;# XOR r5^r4 (0x008a^0x0006=0x008c)
	mov     #0x4002, r15

	mov     #0x0000, r2        ;# V=1, N=0, Z=0, C=1
	mov     #0x558a, r4        ;#
	mov     #0x5586, r5        ;#
	xor.b        r4, r5        ;# XOR r5^r4 (0x008a^0x0086=0x000c)
	mov     #0x4003, r15

	mov     #0x0000, r2        ;# V=1, N=0, Z=1, C=0
	mov     #0x6684, r4        ;#
	mov     #0xaa84, r5        ;#
	xor.b        r4, r5        ;# XOR r5^r4 (0x0084^0x0084=0x0000)
	mov     #0x4004, r15

		/* -------------- c-jump_jeq ------------------- */
        /* -------------- TEST JUMP FORWARD AND BACKWARD ------------------- */

	mov     #0x0002, r2
	mov     #0x1234, r4
	jeq     test_jeq_fwrd1
	mov     #0x0000, r4
	mov     #0x0000, r4
	mov     #0x0000, r4
test_jeq_bckwrd:
	mov     #0x9abc, r6
	jeq     test_jeq_fwrd2
	mov     #0x0000, r4
	mov     #0x0000, r4
	mov     #0x0000, r4
	mov     #0x0000, r5
	mov     #0x0000, r5
	mov     #0x0000, r5
	mov     #0x0000, r6
	mov     #0x0000, r6
	mov     #0x0000, r6
test_jeq_fwrd1:
	mov     #0x5678, r5
	jeq     test_jeq_bckwrd
	mov     #0x0000, r4
	mov     #0x0000, r4
	mov     #0x0000, r4
	mov     #0x0000, r5
	mov     #0x0000, r5
	mov     #0x0000, r5

test_jeq_fwrd2:

	mov     #0x1000, r15

        /* -------------- TEST JUMP FOR ALL FLAG CONFIGURATIONS ------------ */

	mov     #0x0000, r2             ;# {V,N,Z,C} = 4'b0000
	mov     #0x1234, r4
	jeq     test_jeq_0
	mov     #0x0000, r4
test_jeq_0:
	mov     #0x2000, r15

	mov     #0x0001, r2             ;# {V,N,Z,C} = 4'b0001
	mov     #0x1234, r4
	jeq     test_jeq_1
	mov     #0x0000, r4
test_jeq_1:
	mov     #0x2001, r15

	mov     #0x0002, r2             ;# {V,N,Z,C} = 4'b0010
	mov     #0x1234, r4
	jeq     test_jeq_2
	mov     #0x0000, r4
test_jeq_2:
	mov     #0x2002, r15

	mov     #0x0003, r2             ;# {V,N,Z,C} = 4'b0011
	mov     #0x1234, r4
	jeq     test_jeq_3
	mov     #0x0000, r4
test_jeq_3:
	mov     #0x2003, r15

	mov     #0x0004, r2             ;# {V,N,Z,C} = 4'b0100
	mov     #0x1234, r4
	jeq     test_jeq_4
	mov     #0x0000, r4
test_jeq_4:
	mov     #0x2004, r15

	mov     #0x0005, r2             ;# {V,N,Z,C} = 4'b0101
	mov     #0x1234, r4
	jeq     test_jeq_5
	mov     #0x0000, r4
test_jeq_5:
	mov     #0x2005, r15

	mov     #0x0006, r2             ;# {V,N,Z,C} = 4'b0110
	mov     #0x1234, r4
	jeq     test_jeq_6
	mov     #0x0000, r4
test_jeq_6:
	mov     #0x2006, r15

	mov     #0x0007, r2             ;# {V,N,Z,C} = 4'b0111
	mov     #0x1234, r4
	jeq     test_jeq_7
	mov     #0x0000, r4
test_jeq_7:
	mov     #0x2007, r15

	mov     #0x0100, r2             ;# {V,N,Z,C} = 4'b1000
	mov     #0x1234, r4
	jeq     test_jeq_8
	mov     #0x0000, r4
test_jeq_8:
	mov     #0x2008, r15

	mov     #0x0101, r2             ;# {V,N,Z,C} = 4'b1001
	mov     #0x1234, r4
	jeq     test_jeq_9
	mov     #0x0000, r4
test_jeq_9:
	mov     #0x2009, r15

	mov     #0x0102, r2             ;# {V,N,Z,C} = 4'b1010
	mov     #0x1234, r4
	jeq     test_jeq_A
	mov     #0x0000, r4
test_jeq_A:
	mov     #0x200A, r15

	mov     #0x0103, r2             ;# {V,N,Z,C} = 4'b1011
	mov     #0x1234, r4
	jeq     test_jeq_B
	mov     #0x0000, r4
test_jeq_B:
	mov     #0x200B, r15

	mov     #0x0104, r2             ;# {V,N,Z,C} = 4'b1100
	mov     #0x1234, r4
	jeq     test_jeq_C
	mov     #0x0000, r4
test_jeq_C:
	mov     #0x200C, r15

	mov     #0x0105, r2             ;# {V,N,Z,C} = 4'b1101
	mov     #0x1234, r4
	jeq     test_jeq_D
	mov     #0x0000, r4
test_jeq_D:
	mov     #0x200D, r15

	mov     #0x0106, r2             ;# {V,N,Z,C} = 4'b1110
	mov     #0x1234, r4
	jeq     test_jeq_E
	mov     #0x0000, r4
test_jeq_E:
	mov     #0x200E, r15

	mov     #0x0107, r2             ;# {V,N,Z,C} = 4'b1111
	mov     #0x1234, r4
	jeq     test_jeq_F
	mov     #0x0000, r4
test_jeq_F:
	mov     #0x200F, r15

	
	
       /* -------------- TEST INSTRUCTION IN WORD MODE ------------------- */

	# Test DADD without Carry bit set
	mov     #0x0000, r2
	mov     #0x0159, r4
	mov     #0x1078, r5
	dadd         r4, r5        ;# Add decimally r5+r4 (159+1078=1237)

	# Test DADD with Carry bit set
	mov     #0x0001, r2
	mov     #0x4999, r4
	mov     #0x2111, r6
	dadd         r4, r6        ;# Add decimally r6+r4 (4999+2111+C=7111)


	mov     #0x1000, r15

	
	
        /* -------------- two-op_dadd ------------------- */
        /* -------------- TEST INSTRUCTION IN BYTE MODE ------------------- */

	# Test DADD.B without Carry bit set
	mov     #0x0000, r2
	mov     #0x0159, r4
	mov     #0x1078, r5
	dadd.b       r4, r5        ;# Add decimally r5+r4 (59+78=37)

	# Test DADD.B with Carry bit set
	mov     #0x0001, r2
	mov     #0x3149, r4
	mov     #0x5621, r6
	dadd.b       r4, r6        ;# Add decimally r6+r4 (49+21+C=71)


	mov     #0x2000, r15


        /* ------------------ TEST FLAGS IN WORD MODE ---------------------- */

	mov     #0x0000, r2        ;# V=0, N=0, Z=0, C=0
	mov     #0x7995, r4        ;#
	mov     #0x0004, r5        ;#
	dadd         r4, r5        ;# Add decimally r5+r4 (7995+0004=7999)
	mov     #0x3000, r15

	mov     #0x0000, r2        ;# V=0, N=0, Z=0, C=1
	mov     #0x7995, r4        ;#
	mov     #0x2007, r5        ;#
	dadd         r4, r5        ;# Add decimally r5+r4 (7995+2007=2)
	mov     #0x3001, r15

	mov     #0x0000, r2        ;# V=0, N=0, Z=1, C=1
	mov     #0x7995, r4        ;#
	mov     #0x2005, r5        ;#
	dadd         r4, r5        ;# Add decimally r5+r4 (7995+2005=0)
	mov     #0x3002, r15

	mov     #0x0000, r2        ;# V=1, N=1, Z=0, C=0
	mov     #0x7995, r4        ;#
	mov     #0x0007, r5        ;#
	dadd         r4, r5        ;# Add decimally r5+r4 (7995+7=8002)
	mov     #0x3003, r15


        /* ------------------ TEST FLAGS IN BYTE MODE --------------------- */

	mov     #0x0000, r2        ;# V=0, N=0, Z=0, C=0
	mov     #0x4675, r4        ;#
	mov     #0x3104, r5        ;#
	dadd.b       r4, r5        ;# Add decimally r5+r4 (75+4=79)
	mov     #0x4000, r15

	mov     #0x0000, r2        ;# V=0, N=0, Z=0, C=1
	mov     #0x4775, r4        ;#
	mov     #0x3027, r5        ;#
	dadd.b       r4, r5        ;# Add decimally r5+r4 (75+27=2)
	mov     #0x4001, r15

	mov     #0x0000, r2        ;# V=0, N=0, Z=1, C=1
	mov     #0x4775, r4        ;#
	mov     #0x3125, r5        ;#
	dadd.b       r4, r5        ;# Add decimally r5+r4 (75+25=0)
	mov     #0x4002, r15

	mov     #0x0000, r2        ;# V=1, N=1, Z=0, C=0
	mov     #0x4675, r4        ;#
	mov     #0x3207, r5        ;#
	dadd.b       r4, r5        ;# Add decimally r5+r4 (75+7=82)
	mov     #0x4003, r15

	
        /* ---------------------- two-op_autoincr --------------------- */
        /* ---------------------- INITIALIZE MEMORY --------------------- */

    	mov     #0x0000,    &DMEM_200
    	mov     #0x0000,    &DMEM_202
    	mov     #0x1111,    &DMEM_204
    	mov     #0x2222,    &DMEM_206
    	mov     #0x3333,    &DMEM_208
    	mov     #0x4444,    &DMEM_20A
    	mov     #0x5555,    &DMEM_20C
    	mov     #0x6666,    &DMEM_20E
    	mov     #0x7777,    &DMEM_210
    	mov     #0x8888,    &DMEM_212
    	mov     #0x9999,    &DMEM_214
    	mov     #0xAAAA,    &DMEM_216
    	mov     #0xBBBB,    &DMEM_218
    	mov     #0xCCCC,    &DMEM_21A
    	mov     #0xDDDD,    &DMEM_21C
    	mov     #0xEEEE,    &DMEM_21E
    	mov     #0xFFFF,    &DMEM_220
    	mov     #0x1122,    &DMEM_222

    	mov     #0x0001,    &DMEM_200

        /* ---------------------- AUTO-INCREMENT: R1 --------------------- */

    	mov     #DMEM_204,  r1
    	mov     #0x0000,    r2
    	mov     #0x0000,    r3
    	mov     #0x0000,    r4
    	mov     #0x0000,    r5
    	mov     #0x0000,    r6
    	mov     #0x0000,    r7
    	mov     #0x0000,    r8
    	mov     #0x0000,    r9
    	mov     #0x0000,    r10
    	mov     #0x0000,    r11
    	mov     #0x0000,    r12
    	mov     #0x0000,    r13
    	mov     #0x0000,    r14
    	mov     #0x0000,    r15

    	mov     #0x1000,    &DMEM_200
	mov        @r1+,    &DMEM_202
    	mov     #0x1001,    &DMEM_200
	mov        @r1+,    &DMEM_202
    	mov     #0x1002,    &DMEM_200
    	mov     #0x0000,    &DMEM_202

        /* ---------------------- AUTO-INCREMENT: R2 --------------------- */

    	mov     #0x0000,    r1
    	mov     #0x0004,    r2
    	mov     #0x0000,    r3
    	mov     #0x0000,    r4
    	mov     #0x0000,    r5
    	mov     #0x0000,    r6
    	mov     #0x0000,    r7
    	mov     #0x0000,    r8
    	mov     #0x0000,    r9
    	mov     #0x0000,    r10
    	mov     #0x0000,    r11
    	mov     #0x0000,    r12
    	mov     #0x0000,    r13
    	mov     #0x0000,    r14
    	mov     #0x0000,    r15

    	mov     #0x2000,    &DMEM_200
	mov        @r2+,    &DMEM_202
    	mov     #0x2001,    &DMEM_200
	mov        @r2+,    &DMEM_202
    	mov     #0x2002,    &DMEM_200
    	mov     #0x0000,    &DMEM_202

        /* ---------------------- AUTO-INCREMENT: R3 --------------------- */

    	mov     #0x0000,    r1
    	mov     #0x0000,    r2
    	mov     #DMEM_208,  r3
    	mov     #0x0000,    r4
    	mov     #0x0000,    r5
    	mov     #0x0000,    r6
    	mov     #0x0000,    r7
    	mov     #0x0000,    r8
    	mov     #0x0000,    r9
    	mov     #0x0000,    r10
    	mov     #0x0000,    r11
    	mov     #0x0000,    r12
    	mov     #0x0000,    r13
    	mov     #0x0000,    r14
    	mov     #0x0000,    r15

    	mov     #0x3000,    &DMEM_200
	mov        @r3+,    &DMEM_202
    	mov     #0x3001,    &DMEM_200
	mov        @r3+,    &DMEM_202
    	mov     #0x3002,    &DMEM_200
	swpb       @r3+
   	mov     #0x0000,    &DMEM_202

        /* ---------------------- AUTO-INCREMENT: R4 --------------------- */

    	mov     #0x0000,    r1
    	mov     #0x0000,    r2
    	mov     #0x0000,    r3
    	mov     #DMEM_20A,  r4
    	mov     #0x0000,    r5
    	mov     #0x0000,    r6
    	mov     #0x0000,    r7
    	mov     #0x0000,    r8
    	mov     #0x0000,    r9
    	mov     #0x0000,    r10
    	mov     #0x0000,    r11
    	mov     #0x0000,    r12
    	mov     #0x0000,    r13
    	mov     #0x0000,    r14
    	mov     #0x0000,    r15

    	mov     #0x4000,    &DMEM_200
	mov        @r4+,    &DMEM_202
    	mov     #0x4001,    &DMEM_200
	mov        @r4+,    &DMEM_202
    	mov     #0x4002,    &DMEM_200
    	mov     #0x0000,    &DMEM_202

        /* ---------------------- AUTO-INCREMENT: R5 --------------------- */

    	mov     #0x0000,    r1
    	mov     #0x0000,    r2
    	mov     #0x0000,    r3
    	mov     #0x0000,    r4
    	mov     #DMEM_20C,  r5
    	mov     #0x0000,    r6
    	mov     #0x0000,    r7
    	mov     #0x0000,    r8
    	mov     #0x0000,    r9
    	mov     #0x0000,    r10
    	mov     #0x0000,    r11
    	mov     #0x0000,    r12
    	mov     #0x0000,    r13
    	mov     #0x0000,    r14
    	mov     #0x0000,    r15

    	mov     #0x5000,    &DMEM_200
	mov        @r5+,    &DMEM_202
    	mov     #0x5001,    &DMEM_200
	mov        @r5+,    &DMEM_202
    	mov     #0x5002,    &DMEM_200
    	mov     #0x0000,    &DMEM_202

        /* ---------------------- AUTO-INCREMENT: R6 --------------------- */

    	mov     #0x0000,    r1
    	mov     #0x0000,    r2
    	mov     #0x0000,    r3
    	mov     #0x0000,    r4
    	mov     #0x0000,    r5
    	mov     #DMEM_20E,  r6
    	mov     #0x0000,    r7
    	mov     #0x0000,    r8
    	mov     #0x0000,    r9
    	mov     #0x0000,    r10
    	mov     #0x0000,    r11
    	mov     #0x0000,    r12
    	mov     #0x0000,    r13
    	mov     #0x0000,    r14
    	mov     #0x0000,    r15

    	mov     #0x6000,    &DMEM_200
	mov        @r6+,    &DMEM_202
    	mov     #0x6001,    &DMEM_200
	mov        @r6+,    &DMEM_202
    	mov     #0x6002,    &DMEM_200
    	mov     #0x0000,    &DMEM_202

        /* ---------------------- AUTO-INCREMENT: R7 --------------------- */

    	mov     #0x0000,    r1
    	mov     #0x0000,    r2
    	mov     #0x0000,    r3
    	mov     #0x0000,    r4
    	mov     #0x0000,    r5
    	mov     #0x0000,    r6
    	mov     #DMEM_210,  r7
    	mov     #0x0000,    r8
    	mov     #0x0000,    r9
    	mov     #0x0000,    r10
    	mov     #0x0000,    r11
    	mov     #0x0000,    r12
    	mov     #0x0000,    r13
    	mov     #0x0000,    r14
    	mov     #0x0000,    r15

    	mov     #0x7000,    &DMEM_200
	mov        @r7+,    &DMEM_202
    	mov     #0x7001,    &DMEM_200
	mov        @r7+,    &DMEM_202
    	mov     #0x7002,    &DMEM_200
    	mov     #0x0000,    &DMEM_202

        /* ---------------------- AUTO-INCREMENT: R8 --------------------- */

    	mov     #0x0000,    r1
    	mov     #0x0000,    r2
    	mov     #0x0000,    r3
    	mov     #0x0000,    r4
    	mov     #0x0000,    r5
    	mov     #0x0000,    r6
    	mov     #0x0000,    r7
    	mov     #DMEM_212,  r8
    	mov     #0x0000,    r9
    	mov     #0x0000,    r10
    	mov     #0x0000,    r11
    	mov     #0x0000,    r12
    	mov     #0x0000,    r13
    	mov     #0x0000,    r14
    	mov     #0x0000,    r15

    	mov     #0x8000,    &DMEM_200
	mov        @r8+,    &DMEM_202
    	mov     #0x8001,    &DMEM_200
	mov        @r8+,    &DMEM_202
    	mov     #0x8002,    &DMEM_200
    	mov     #0x0000,    &DMEM_202

        /* ---------------------- AUTO-INCREMENT: R9 --------------------- */

    	mov     #0x0000,    r1
    	mov     #0x0000,    r2
    	mov     #0x0000,    r3
    	mov     #0x0000,    r4
    	mov     #0x0000,    r5
    	mov     #0x0000,    r6
    	mov     #0x0000,    r7
    	mov     #0x0000,    r8
    	mov     #DMEM_214,  r9
    	mov     #0x0000,    r10
    	mov     #0x0000,    r11
    	mov     #0x0000,    r12
    	mov     #0x0000,    r13
    	mov     #0x0000,    r14
    	mov     #0x0000,    r15

    	mov     #0x9000,    &DMEM_200
	mov         @r9+,   &DMEM_202
    	mov     #0x9001,    &DMEM_200
	mov         @r9+,   &DMEM_202
    	mov     #0x9002,    &DMEM_200
    	mov     #0x0000,    &DMEM_202

        /* ---------------------- AUTO-INCREMENT: R10 --------------------- */

    	mov     #0x0000,    r1
    	mov     #0x0000,    r2
    	mov     #0x0000,    r3
    	mov     #0x0000,    r4
    	mov     #0x0000,    r5
    	mov     #0x0000,    r6
    	mov     #0x0000,    r7
    	mov     #0x0000,    r8
    	mov     #0x0000,    r9
    	mov     #DMEM_216,  r10
    	mov     #0x0000,    r11
    	mov     #0x0000,    r12
    	mov     #0x0000,    r13
    	mov     #0x0000,    r14
    	mov     #0x0000,    r15

    	mov     #0xA000,    &DMEM_200
	mov       @r10+,    &DMEM_202
    	mov     #0xA001,    &DMEM_200
	mov       @r10+,    &DMEM_202
    	mov     #0xA002,    &DMEM_200
    	mov     #0x0000,    &DMEM_202

        /* ---------------------- AUTO-INCREMENT: R11 --------------------- */

    	mov     #0x0000,    r1
    	mov     #0x0000,    r2
    	mov     #0x0000,    r3
    	mov     #0x0000,    r4
    	mov     #0x0000,    r5
    	mov     #0x0000,    r6
    	mov     #0x0000,    r7
    	mov     #0x0000,    r8
    	mov     #0x0000,    r9
    	mov     #0x0000,    r10
    	mov     #DMEM_218,  r11
    	mov     #0x0000,    r12
    	mov     #0x0000,    r13
    	mov     #0x0000,    r14
    	mov     #0x0000,    r15

    	mov     #0xB000,    &DMEM_200
	mov       @r11+,    &DMEM_202
    	mov     #0xB001,    &DMEM_200
	mov       @r11+,    &DMEM_202
    	mov     #0xB002,    &DMEM_200
    	mov     #0x0000,    &DMEM_202

        /* ---------------------- AUTO-INCREMENT: R12 --------------------- */

    	mov     #0x0000,    r1
    	mov     #0x0000,    r2
    	mov     #0x0000,    r3
    	mov     #0x0000,    r4
    	mov     #0x0000,    r5
    	mov     #0x0000,    r6
    	mov     #0x0000,    r7
    	mov     #0x0000,    r8
    	mov     #0x0000,    r9
    	mov     #0x0000,    r10
    	mov     #0x0000,    r11
    	mov     #DMEM_21A,  r12
    	mov     #0x0000,    r13
    	mov     #0x0000,    r14
    	mov     #0x0000,    r15

    	mov     #0xC000,    &DMEM_200
	mov       @r12+,    &DMEM_202
    	mov     #0xC001,    &DMEM_200
	mov       @r12+,    &DMEM_202
    	mov     #0xC002,    &DMEM_200
    	mov     #0x0000,    &DMEM_202

        /* ---------------------- AUTO-INCREMENT: R13 --------------------- */

    	mov     #0x0000,    r1
    	mov     #0x0000,    r2
    	mov     #0x0000,    r3
    	mov     #0x0000,    r4
    	mov     #0x0000,    r5
    	mov     #0x0000,    r6
    	mov     #0x0000,    r7
    	mov     #0x0000,    r8
    	mov     #0x0000,    r9
    	mov     #0x0000,    r10
    	mov     #0x0000,    r11
    	mov     #0x0000,    r12
    	mov     #DMEM_21C,  r13
    	mov     #0x0000,    r14
    	mov     #0x0000,    r15

    	mov     #0xD000,    &DMEM_200
	mov       @r13+,    &DMEM_202
    	mov     #0xD001,    &DMEM_200
	mov       @r13+,    &DMEM_202
    	mov     #0xD002,    &DMEM_200
    	mov     #0x0000,    &DMEM_202

        /* ---------------------- AUTO-INCREMENT: R14 --------------------- */

    	mov     #0x0000,    r1
    	mov     #0x0000,    r2
    	mov     #0x0000,    r3
    	mov     #0x0000,    r4
    	mov     #0x0000,    r5
    	mov     #0x0000,    r6
    	mov     #0x0000,    r7
    	mov     #0x0000,    r8
    	mov     #0x0000,    r9
    	mov     #0x0000,    r10
    	mov     #0x0000,    r11
    	mov     #0x0000,    r12
    	mov     #0x0000,    r13
     	mov     #DMEM_21E,  r14
    	mov     #0x0000,    r15

    	mov     #0xE000,    &DMEM_200
	mov       @r14+,    &DMEM_202
    	mov     #0xE001,    &DMEM_200
	mov       @r14+,    &DMEM_202
    	mov     #0xE002,    &DMEM_200
    	mov     #0x0000,    &DMEM_202

        /* ---------------------- AUTO-INCREMENT: R15 --------------------- */

    	mov     #0x0000,    r1
    	mov     #0x0000,    r2
    	mov     #0x0000,    r3
    	mov     #0x0000,    r4
    	mov     #0x0000,    r5
    	mov     #0x0000,    r6
    	mov     #0x0000,    r7
    	mov     #0x0000,    r8
    	mov     #0x0000,    r9
    	mov     #0x0000,    r10
    	mov     #0x0000,    r11
    	mov     #0x0000,    r12
    	mov     #0x0000,    r13
    	mov     #0x0000,    r14
    	mov     #DMEM_220,  r15

    	mov     #0xF000,    &DMEM_200
	mov       @r15+,    &DMEM_202
    	mov     #0xF001,    &DMEM_200
	mov       @r15+,    &DMEM_202
    	mov     #0xF002,    &DMEM_200
    	mov     #0x0000,    &DMEM_202
		
		
		
		/* ----------------------  clock_module --------------- */
mov #DMEM_250, r1       ; # Initialize stack pointer
	mov   #0x0000, &DMEM_200
	mov   #0x0000, r15

       /* --------------                ACLK GENERATION             ----------------- */

	mov.b  #0x00, &BCSCTL1  ; # Div /1
	mov    #0x0001, r15
	mov    #0x0130, r14
        call   #WAIT_FUNC

	mov.b  #0x10, &BCSCTL1  ; # Div /2
	mov    #0x0002, r15
	mov    #0x0130, r14
        call   #WAIT_FUNC

	mov.b  #0x20, &BCSCTL1  ; # Div /4
	mov    #0x0003, r15
	mov    #0x0130, r14
        call   #WAIT_FUNC

	mov.b  #0x30, &BCSCTL1  ; # Div /8
	mov    #0x0004, r15
	mov    #0x0130, r14
        call   #WAIT_FUNC

	mov  #0x1000, r15

	
       /* --------------      SMCLK GENERATION - LFXT_CLK INPUT    ----------------- */
	
 	mov.b  #0x08, &BCSCTL2  ; # Div /1
	mov    #0x1001, r15
 	mov    #0x0130, r14
        call   #WAIT_FUNC

 	mov.b  #0x0A, &BCSCTL2  ; # Div /2
	mov    #0x1002, r15
 	mov    #0x0130, r14
        call   #WAIT_FUNC

 	mov.b  #0x0C, &BCSCTL2  ; # Div /4
	mov    #0x1003, r15
 	mov    #0x0130, r14
        call   #WAIT_FUNC

 	mov.b  #0x0E, &BCSCTL2  ; # Div /8
	mov    #0x1004, r15
 	mov    #0x0130, r14
        call   #WAIT_FUNC

	mov  #0x2000, r15

	
       /* --------------      SMCLK GENERATION - DCO_CLK INPUT     ----------------- */

 	mov.b  #0x00, &BCSCTL2  ; # Div /1
	mov    #0x2001, r15
 	mov    #0x0130, r14
        call   #WAIT_FUNC

 	mov.b  #0x02, &BCSCTL2  ; # Div /2
	mov    #0x2002, r15
 	mov    #0x0130, r14
        call   #WAIT_FUNC

 	mov.b  #0x04, &BCSCTL2  ; # Div /4
	mov    #0x2003, r15
 	mov    #0x0130, r14
        call   #WAIT_FUNC

 	mov.b  #0x06, &BCSCTL2  ; # Div /8
	mov    #0x2004, r15
 	mov    #0x0130, r14
        call   #WAIT_FUNC

	mov  #0x3000, r15


        /* --------------      CPU ENABLE - CPU_EN INPUT     ----------------- */

 	mov    #0x0800, r14
        call   #WAIT_FUNC

	mov  #0x4000, r15
	

        /* --------------      RD/WR ACCESS TO REGISTERS     ----------------- */

 	mov.b     #0x00, &BCSCTL1
 	mov.b     #0x00, &BCSCTL2
 	mov.b  &BCSCTL1, r4
 	mov.b  &BCSCTL2, r5
	
 	mov.b     #0xff, &BCSCTL1
 	mov.b  &BCSCTL1, r6
 	mov.b  &BCSCTL2, r7
	
 	mov.b     #0x00, &BCSCTL1
 	mov.b  &BCSCTL1, r8
 	mov.b  &BCSCTL2, r9

 	mov.b     #0xff, &BCSCTL2
 	mov.b  &BCSCTL1, r10
 	mov.b  &BCSCTL2, r11
	
 	mov.b     #0x00, &BCSCTL2
 	mov.b  &BCSCTL1, r12
 	mov.b  &BCSCTL2, r13

	
	mov     #0x5000, r15
 	mov     #0x0010, r14
        call    #WAIT_FUNC
		
		
	mov	#0x0004, R2
	mov	#0xC964, R5
	mov	#0x656D, R6
	ADD.b	R5, R6
	mov	#0x0103, R2
	mov	#0x647F, R5
	mov	#0x0B85, R6
	ADD.b	R5, R6
	mov	#0x0001, R2
	mov	#0xFAAE, R5
	mov	#0xB25E, R6
	ADD	R5, R6
	mov	#0x0104, R2
	mov	#0x2F2B, R5
	mov	#0x59C2, R6
	ADD.b	R5, R6
	mov	#0x0102, R2
	mov	#0x4001, R5
	mov	#0xE7FE, R6
	ADD.b	R5, R6
	mov	#0x0005, R2
	mov	#0x1356, R5
	mov	#0x14D3, R6
	ADD.b	R5, R6
	mov	#0x0006, R2
	mov	#0x0000, R5
	mov	#0xBFFF, R6
	ADD.b	R5, R6
	mov	#0x0103, R2
	mov	#0x0201, R5
	mov	#0xFBE4, R6
	ADD.b	R5, R6
	mov	#0x0001, R2
	mov	#0x3D00, R5
	mov	#0xDD59, R6
	ADD	R5, R6
	mov	#0x0000, R2
	mov	#0x0E40, R5
	mov	#0xCB2C, R6
	ADD	R5, R6
	mov	#0x0100, R2
	mov	#0x0681, R5
	mov	#0x6516, R6
	ADD	R5, R6
	mov	#0x0000, R2
	mov	#0x7402, R5
	mov	#0x5B21, R6
	ADD	R5, R6
	mov	#0x0104, R2
	mov	#0xCC11, R5
	mov	#0xC43A, R6
	ADD	R5, R6
	mov	#0x0006, R2
	mov	#0x6620, R5
	mov	#0x621D, R6
	ADD	R5, R6
	mov	#0x0007, R2
	mov	#0xC404, R5
	mov	#0x58A4, R6
	ADD	R5, R6
	mov	#0x0103, R2
	mov	#0x6009, R5
	mov	#0xAC52, R6
	ADD	R5, R6
	mov	#0x0001, R2
	mov	#0x4600, R5
	mov	#0xBF83, R6
	ADD	R5, R6
	mov	#0x0004, R2
	mov	#0x1000, R5
	mov	#0xB66A, R6
	ADD.b	R5, R6
	mov	#0x0102, R2
	mov	#0x0801, R5
	mov	#0x5B34, R6
	ADD.b	R5, R6
	mov	#0x0005, R2
	mov	#0x2000, R5
	mov	#0x2D9A, R6
	ADD.b	R5, R6
	mov	#0x0005, R2
	mov	#0x8000, R5
	mov	#0x8B66, R6
	ADD.b	R5, R6
	mov	#0x0106, R2
	mov	#0x0401, R5
	mov	#0x2C18, R6
	ADD.b	R5, R6
	mov	#0x0003, R2
	mov	#0x0000, R5
	mov	#0xFFA6, R6
	ADD.b	R5, R6
	mov	#0x0102, R2
	mov	#0x8319, R5
	mov	#0x4A3C, R6
	ADD	R5, R6
	mov	#0x0003, R2
	mov	#0x6D1A, R5
	mov	#0x05C3, R6
	CMP.b	R5, R6
	mov	#0x0100, R2
	mov	#0x5A27, R5
	mov	#0xAC28, R6
	CMP.b	R5, R6
	mov	#0x0105, R2
	mov	#0xEAD3, R5
	mov	#0xB257, R6
	CMP	R5, R6
	mov	#0x0104, R2
	mov	#0xC469, R5
	mov	#0x5A1E, R6
	CMP.b	R5, R6
	mov	#0x0103, R2
	mov	#0xF1ED, R5
	mov	#0xF3CD, R6
	CMP.b	R5, R6
	mov	#0x0005, R2
	mov	#0x8000, R5
	mov	#0x8000, R6
	CMP.b	R5, R6
	mov	#0x0006, R2
	mov	#0x4000, R5
	mov	#0x4000, R6
	CMP.b	R5, R6
	mov	#0x0102, R2
	mov	#0xD711, R5
	mov	#0xFE68, R6
	CMP	R5, R6
	mov	#0x0001, R2
	mov	#0x0000, R5
	mov	#0x0040, R6
	CMP.b	R5, R6
	mov	#0x0000, R2
	mov	#0x5E92, R5
	mov	#0x4B2C, R6
	CMP.b	R5, R6
	mov	#0x0100, R2
	mov	#0x0751, R5
	mov	#0x6510, R6
	CMP.b	R5, R6
	mov	#0x0104, R2
	mov	#0xCD01, R5
	mov	#0xC500, R6
	CMP	R5, R6
	mov	#0x0006, R2
	mov	#0x6680, R5
	mov	#0x6281, R6
	CMP	R5, R6
	mov	#0x0007, R2
	mov	#0xC402, R5
	mov	#0x5802, R6
	CMP	R5, R6
	mov	#0x0103, R2
	mov	#0x0201, R5
	mov	#0x0000, R6
	CMP.b	R5, R6
	mov	#0x0001, R2
	mov	#0x4610, R5
	mov	#0xBA01, R6
	CMP	R5, R6
	mov	#0x0004, R2
	mov	#0xD020, R5
	mov	#0xB221, R6
	CMP	R5, R6
	mov	#0x0102, R2
	mov	#0xEA05, R5
	mov	#0x5A05, R6
	CMP	R5, R6
	mov	#0x0005, R2
	mov	#0xF408, R5
	mov	#0x2C08, R6
	CMP	R5, R6
	mov	#0x0102, R2
	mov	#0x7A01, R5
	mov	#0x1601, R6
	CMP	R5, R6
	mov	#0x0005, R2
	mov	#0x1000, R5
	mov	#0x1000, R6
	CMP.b	R5, R6
	mov	#0x0106, R2
	mov	#0x0801, R5
	mov	#0x0800, R6
	CMP.b	R5, R6
	mov	#0x0003, R2
	mov	#0x2000, R5
	mov	#0x2000, R6
	CMP.b	R5, R6
	mov	#0x0102, R2
	mov	#0x0001, R5
	mov	#0x0000, R6
	CMP.b	R5, R6
	mov	#0x0100, R2
	mov	#0x0001, R5
	mov	#0x0400, R6
	CMP.b	R5, R6
	mov	#0x0100, R2
	mov	#0x0001, R5
	mov	#0x0000, R6
	CMP.b	R5, R6
	mov	#0x0002, R2
	mov	#0xDE8A, R5
	mov	#0xA7A9, R6
	CMP	R5, R6
	mov	#0x0101, R2
	mov	#0xBAEB, R5
	mov	#0x8BEB, R6
	DADD.b	R5, R6
	mov	#0x0006, R2
	mov	#0x6312, R5
	mov	#0xB000, R6
	DADD.b	R5, R6
	mov	#0x0001, R2
	mov	#0xEFFC, R5
	mov	#0xFBFC, R6
	DADD	R5, R6
	mov	#0x0104, R2
	mov	#0x0323, R5
	mov	#0x65CB, R6
	DADD.b	R5, R6
	mov	#0x0102, R2
	mov	#0xFF17, R5
	mov	#0xFF57, R6
	DADD.b	R5, R6
	mov	#0x0005, R2
	mov	#0xAD88, R5
	mov	#0x2EA6, R6
	DADD.b	R5, R6
	mov	#0x0006, R2
	mov	#0x8EEE, R5
	mov	#0x8279, R6
	DADD.b	R5, R6
	mov	#0x0103, R2
	mov	#0x721B, R5
	mov	#0x521B, R6
	DADD.b	R5, R6
	mov	#0x0001, R2
	mov	#0x1D04, R5
	mov	#0x9405, R6
	DADD	R5, R6
	mov	#0x0000, R2
	mov	#0xE5A6, R5
	mov	#0xEDA7, R6
	DADD.b	R5, R6
	mov	#0x0100, R2
	mov	#0x0E49, R5
	mov	#0x6C16, R6
	DADD.b	R5, R6
	mov	#0x0000, R2
	mov	#0x750A, R5
	mov	#0x5B0B, R6
	DADD	R5, R6
	mov	#0x0104, R2
	mov	#0x52AD, R5
	mov	#0x50AD, R6
	DADD.b	R5, R6
	mov	#0x0006, R2
	mov	#0xC7C2, R5
	mov	#0xC742, R6
	DADD.b	R5, R6
	mov	#0x0007, R2
	mov	#0xC4B8, R5
	mov	#0x58BA, R6
	DADD	R5, R6
	mov	#0x0103, R2
	mov	#0x94ED, R5
	mov	#0x94FD, R6
	DADD.b	R5, R6
	mov	#0x0001, R2
	mov	#0x4696, R5
	mov	#0xBEB7, R6
	DADD	R5, R6
	mov	#0x0004, R2
	mov	#0xD720, R5
	mov	#0xD724, R6
	DADD.b	R5, R6
	mov	#0x0102, R2
	mov	#0xEB69, R5
	mov	#0x5B61, R6
	DADD	R5, R6
	mov	#0x0005, R2
	mov	#0x8684, R5
	mov	#0x9685, R6
	DADD.b	R5, R6
	mov	#0x0005, R2
	mov	#0x5AB0, R5
	mov	#0x1AB0, R6
	DADD.b	R5, R6
	mov	#0x0106, R2
	mov	#0x948B, R5
	mov	#0x948A, R6
	DADD.b	R5, R6
	mov	#0x0003, R2
	mov	#0xBB34, R5
	mov	#0x3B35, R6
	DADD.b	R5, R6
	mov	#0x0005, R2
	mov	#0x4496, R5
	mov	#0x4097, R6
	DADD.b	R5, R6
	mov	#0x0102, R2
	mov	#0x1755, R5
	mov	#0x1755, R6
	DADD.b	R5, R6
	mov	#0x0001, R2
	mov	#0x362E, R5
	mov	#0xCD34, R6
	DADD	R5, R6
	mov	#0x0100, R2
	mov	#0x996B, R5
	mov	#0xC62E, R6
	MOV.b	R5, R6
	mov	#0x0007, R2
	mov	#0x4BC0, R5
	mov	#0x1D1F, R6
	MOV.b	R5, R6
	mov	#0x0001, R2
	mov	#0xE6B2, R5
	mov	#0x73EB, R6
	MOV.b	R5, R6
	mov	#0x0104, R2
	mov	#0x0077, R5
	mov	#0x20D0, R6
	MOV	R5, R6
	mov	#0x0103, R2
	mov	#0x77FD, R5
	mov	#0x788D, R6
	MOV	R5, R6
	mov	#0x0005, R2
	mov	#0xFFFE, R5
	mov	#0x1BC6, R6
	MOV.b	R5, R6
	mov	#0x0007, R2
	mov	#0xF7FE, R5
	mov	#0x27BB, R6
	MOV.b	R5, R6
	mov	#0x0103, R2
	mov	#0xD5BF, R5
	mov	#0xFFE4, R6
	MOV	R5, R6
	mov	#0x0001, R2
	mov	#0x1CFE, R5
	mov	#0x9558, R6
	MOV	R5, R6
	mov	#0x0000, R2
	mov	#0x0F7E, R5
	mov	#0xCA2C, R6
	MOV	R5, R6
	mov	#0x0100, R2
	mov	#0x07EF, R5
	mov	#0x6516, R6
	MOV	R5, R6
	mov	#0x0000, R2
	mov	#0x75DE, R5
	mov	#0x5B21, R6
	MOV	R5, R6
	mov	#0x0104, R2
	mov	#0xCFFB, R5
	mov	#0xC43B, R6
	MOV	R5, R6
	mov	#0x0006, R2
	mov	#0x67F6, R5
	mov	#0x621D, R6
	MOV	R5, R6
	mov	#0x0007, R2
	mov	#0xC5FE, R5
	mov	#0x58A4, R6
	MOV	R5, R6
	mov	#0x0103, R2
	mov	#0xEFFF, R5
	mov	#0xAC53, R6
	MOV.b	R5, R6
	mov	#0x0001, R2
	mov	#0xDFFE, R5
	mov	#0xBF83, R6
	MOV.b	R5, R6
	mov	#0x0004, R2
	mov	#0xBFFE, R5
	mov	#0xB66B, R6
	MOV.b	R5, R6
	mov	#0x0102, R2
	mov	#0xFDFF, R5
	mov	#0x5B35, R6
	MOV.b	R5, R6
	mov	#0x0005, R2
	mov	#0x7FFE, R5
	mov	#0x2D9B, R6
	MOV.b	R5, R6
	mov	#0x0102, R2
	mov	#0xFBFF, R5
	mov	#0x16CD, R6
	MOV.b	R5, R6
	mov	#0x0005, R2
	mov	#0xFFFE, R5
	mov	#0x8B67, R6
	MOV.b	R5, R6
	mov	#0x0003, R2
	mov	#0x91CC, R5
	mov	#0x7CD6, R6
	SUB.b	R5, R6
	mov	#0x0004, R2
	mov	#0x07B2, R5
	mov	#0xCBEA, R6
	SUB.b	R5, R6
	mov	#0x0100, R2
	mov	#0xEA49, R5
	mov	#0xB305, R6
	SUB	R5, R6
	mov	#0x0104, R2
	mov	#0x7E27, R5
	mov	#0x6409, R6
	SUB.b	R5, R6
	mov	#0x0102, R2
	mov	#0x3001, R5
	mov	#0x0324, R6
	SUB.b	R5, R6
	mov	#0x0005, R2
	mov	#0xA8D0, R5
	mov	#0x9006, R6
	SUB.b	R5, R6
	mov	#0x0006, R2
	mov	#0xA118, R5
	mov	#0x4281, R6
	SUB.b	R5, R6
	mov	#0x0103, R2
	mov	#0xDD1D, R5
	mov	#0xBBFD, R6
	SUB.b	R5, R6
	mov	#0x0001, R2
	mov	#0x1D40, R5
	mov	#0xDC48, R6
	SUB	R5, R6
	mov	#0x0000, R2
	mov	#0x0F92, R5
	mov	#0xCB00, R6
	SUB	R5, R6
	mov	#0x0100, R2
	mov	#0x06C1, R5
	mov	#0x6496, R6
	SUB	R5, R6
	mov	#0x0000, R2
	mov	#0x7002, R5
	mov	#0x5B23, R6
	SUB	R5, R6
	mov	#0x0104, R2
	mov	#0xCC91, R5
	mov	#0xC43A, R6
	SUB	R5, R6
	mov	#0x0006, R2
	mov	#0x20F0, R5
	mov	#0x6229, R6
	SUB	R5, R6
	mov	#0x0007, R2
	mov	#0xC44C, R5
	mov	#0x58A4, R6
	SUB	R5, R6
	mov	#0x0103, R2
	mov	#0x626D, R5
	mov	#0xAC18, R6
	SUB	R5, R6
	mov	#0x0001, R2
	mov	#0x1480, R5
	mov	#0x1A01, R6
	SUB.b	R5, R6
	mov	#0x0004, R2
	mov	#0x5CC2, R5
	mov	#0x8828, R6
	SUB.b	R5, R6
	mov	#0x0102, R2
	mov	#0xE001, R5
	mov	#0x3A35, R6
	SUB.b	R5, R6
	mov	#0x0005, R2
	mov	#0xE012, R5
	mov	#0x4D08, R6
	SUB.b	R5, R6
	mov	#0x0102, R2
	mov	#0x7A15, R5
	mov	#0x02C9, R6
	SUB.b	R5, R6
	mov	#0x0005, R2
	mov	#0x3C0E, R5
	mov	#0x8540, R6
	SUB.b	R5, R6
	mov	#0x0003, R2
	mov	#0x074E, R5
	mov	#0x6CC8, R6
	SUBC	R5, R6
	mov	#0x0004, R2
	mov	#0x0EB2, R5
	mov	#0xCF3B, R6
	SUBC.b	R5, R6
	mov	#0x0105, R2
	mov	#0x4001, R5
	mov	#0x0000, R6
	SUBC.b	R5, R6
	mov	#0x0100, R2
	mov	#0x031B, R5
	mov	#0x2326, R6
	SUBC	R5, R6
	mov	#0x0102, R2
	mov	#0xA001, R5
	mov	#0x6000, R6
	SUBC.b	R5, R6
	mov	#0x0005, R2
	mov	#0xF800, R5
	mov	#0x0801, R6
	SUBC.b	R5, R6
	mov	#0x0006, R2
	mov	#0xCE84, R5
	mov	#0x1BC7, R6
	SUBC.b	R5, R6
	mov	#0x0103, R2
	mov	#0xFC11, R5
	mov	#0xFA11, R6
	SUBC	R5, R6
	mov	#0x0001, R2
	mov	#0x1CA0, R5
	mov	#0x95E0, R6
	SUBC	R5, R6
	mov	#0x0000, R2
	mov	#0x0F80, R5
	mov	#0xCB80, R6
	SUBC	R5, R6
	mov	#0x0100, R2
	mov	#0x06CB, R5
	mov	#0x0456, R6
	SUBC.b	R5, R6
	mov	#0x0104, R2
	mov	#0x6C03, R5
	mov	#0x9400, R6
	SUBC.b	R5, R6
	mov	#0x0006, R2
	mov	#0x6700, R5
	mov	#0x6301, R6
	SUBC	R5, R6
	mov	#0x0007, R2
	mov	#0x5408, R5
	mov	#0xAC08, R6
	SUBC.b	R5, R6
	mov	#0x0103, R2
	mov	#0x6203, R5
	mov	#0xAC02, R6
	SUBC	R5, R6
	mov	#0x0001, R2
	mov	#0x4604, R5
	mov	#0xBE05, R6
	SUBC	R5, R6
	mov	#0x0004, R2
	mov	#0xD800, R5
	mov	#0x3801, R6
	SUBC.b	R5, R6
	mov	#0x0102, R2
	mov	#0xEC01, R5
	mov	#0x1C01, R6
	SUBC.b	R5, R6
	mov	#0x0005, R2
	mov	#0xE600, R5
	mov	#0x3A01, R6
	SUBC.b	R5, R6
	mov	#0x0102, R2
	mov	#0x0301, R5
	mov	#0xFF00, R6
	SUBC.b	R5, R6
	mov	#0x0005, R2
	mov	#0xC000, R5
	mov	#0xC001, R6
	SUBC.b	R5, R6
	mov	#0x0106, R2
	mov	#0xDC81, R5
	mov	#0x2781, R6
	SUBC.b	R5, R6
	mov	#0x0003, R2
	mov	#0xE320, R5
	mov	#0xFEA6, R6
	SUBC	R5, R6
	mov	#0x0005, R2
	mov	#0x0632, R5
	mov	#0x9779, R6
	SUBC	R5, R6
	mov	#0x0102, R2
	mov	#0x8239, R5
	mov	#0x4AFC, R6
	SUBC	R5, R6
	mov	#0x0001, R2
	mov	#0xB62E, R5
	mov	#0xCC35, R6
	SUBC.b	R5, R6
	mov	#0x0003, R2
	mov	#0x3B70, R5
	mov	#0xE31E, R6
	XOR.b	R5, R6
	mov	#0x0100, R2
	mov	#0x33AF, R5
	mov	#0x3189, R6
	XOR.b	R5, R6
	mov	#0x0105, R2
	mov	#0xDE93, R5
	mov	#0xB277, R6
	XOR	R5, R6
	mov	#0x0104, R2
	mov	#0x0003, R5
	mov	#0xEFFE, R6
	XOR.b	R5, R6
	mov	#0x0102, R2
	mov	#0xCCE3, R5
	mov	#0x35E6, R6
	XOR.b	R5, R6
	mov	#0x0005, R2
	mov	#0x0402, R5
	mov	#0x1CBF, R6
	XOR.b	R5, R6
	mov	#0x0006, R2
	mov	#0x2002, R5
	mov	#0xD7FE, R6
	XOR.b	R5, R6
	mov	#0x0103, R2
	mov	#0xF403, R5
	mov	#0xFFD0, R6
	XOR	R5, R6
	mov	#0x0001, R2
	mov	#0x5524, R5
	mov	#0xD17C, R6
	XOR.b	R5, R6
	mov	#0x0000, R2
	mov	#0x8D4A, R5
	mov	#0xCA64, R6
	XOR.b	R5, R6
	mov	#0x0100, R2
	mov	#0x5755, R5
	mov	#0x2502, R6
	XOR.b	R5, R6
	mov	#0x0000, R2
	mov	#0x7500, R5
	mov	#0x5B21, R6
	XOR	R5, R6
	mov	#0x0104, R2
	mov	#0x0081, R5
	mov	#0xC43A, R6
	XOR	R5, R6
	mov	#0x0006, R2
	mov	#0x0200, R5
	mov	#0x621C, R6
	XOR.b	R5, R6
	mov	#0x0007, R2
	mov	#0x0102, R5
	mov	#0x58A4, R6
	XOR.b	R5, R6
	mov	#0x0103, R2
	mov	#0x0005, R5
	mov	#0xAC52, R6
	XOR	R5, R6
	mov	#0x0001, R2
	mov	#0x0020, R5
	mov	#0xBF82, R6
	XOR	R5, R6
	mov	#0x0004, R2
	mov	#0xD442, R5
	mov	#0xB66A, R6
	XOR	R5, R6
	mov	#0x0102, R2
	mov	#0x0209, R5
	mov	#0x5B34, R6
	XOR	R5, R6
	mov	#0x0005, R2
	mov	#0x0012, R5
	mov	#0x2D9A, R6
	XOR	R5, R6
	mov	#0x0005, R2
	mov	#0x1002, R5
	mov	#0x8B66, R6
	XOR.b	R5, R6
	mov	#0x0106, R2
	mov	#0x4001, R5
	mov	#0x2C18, R6
	XOR.b	R5, R6
	mov	#0x0003, R2
	mov	#0x8000, R5
	mov	#0xFFA6, R6
	XOR.b	R5, R6
	mov	#0x0005, R2
	mov	#0x0402, R5
	mov	#0x9678, R6
	XOR.b	R5, R6
	mov	#0x0102, R2
	mov	#0x0801, R5
	mov	#0x4B3C, R6
	XOR.b	R5, R6
	mov	#0x0105, R2
	mov	#0x9256, R6
	RRA.b	 R6
	mov	#0x0002, R2
	mov	#0x5423, R6
	RRA	 R6
	mov	#0x0103, R2
	mov	#0xB958, R6
	RRA	 R6
	mov	#0x0100, R2
	mov	#0x6485, R6
	RRA.b	 R6
	mov	#0x0005, R2
	mov	#0xF32A, R6
	RRA.b	 R6
	mov	#0x0102, R2
	mov	#0x78D2, R6
	RRA.b	 R6
	mov	#0x0104, R2
	mov	#0xFF93, R6
	RRA	 R6
	mov	#0x0006, R2
	mov	#0xF7C8, R6
	RRA.b	 R6
	mov	#0x0002, R2
	mov	#0x28B0, R6
	RRA.b	 R6
	mov	#0x0001, R2
	mov	#0x9458, R6
	RRA	 R6
	mov	#0x0000, R2
	mov	#0xCA2C, R6
	RRA	 R6
	mov	#0x0001, R2
	mov	#0xB642, R6
	RRA	 R6
	mov	#0x0101, R2
	mov	#0x8875, R6
	RRA	 R6
	mov	#0x0104, R2
	mov	#0xC43A, R6
	RRA	 R6
	mov	#0x0107, R2
	mov	#0xB149, R6
	RRA	 R6
	mov	#0x0007, R2
	mov	#0x58A4, R6
	RRA	 R6
	mov	#0x0002, R2
	mov	#0x7F06, R6
	RRA.b	 R6
	mov	#0x0100, R2
	mov	#0x6CD6, R6
	RRA.b	 R6
	mov	#0x0004, R2
	mov	#0xB66A, R6
	RRA.b	 R6
	mov	#0x0102, R2
	mov	#0x5B35, R6
	RRA.b	 R6
	mov	#0x0005, R2
	mov	#0x2D9A, R6
	RRA.b	 R6
	mov	#0x0102, R2
	mov	#0x16CC, R6
	RRA.b	 R6
	mov	#0x0007, R2
	mov	#0xFE4D, R6
	RRA	 R6
	mov	#0x0105, R2
	mov	#0x9256, R6
	RRC.b	 R6
	mov	#0x0002, R2
	mov	#0x6CE1, R6
	RRC	 R6
	mov	#0x0103, R2
	mov	#0x27A3, R6
	RRC	 R6
	mov	#0x0100, R2
	mov	#0xDC8C, R6
	RRC.b	 R6
	mov	#0x0004, R2
	mov	#0xF30B, R6
	RRC.b	 R6
	mov	#0x0102, R2
	mov	#0xF38A, R6
	RRC.b	 R6
	mov	#0x0104, R2
	mov	#0xEF92, R6
	RRC.b	 R6
	mov	#0x0006, R2
	mov	#0xFFC9, R6
	RRC	 R6
	mov	#0x0001, R2
	mov	#0x9458, R6
	RRC	 R6
	mov	#0x0000, R2
	mov	#0xCA2C, R6
	RRC	 R6
	mov	#0x0001, R2
	mov	#0xB642, R6
	RRC	 R6
	mov	#0x0101, R2
	mov	#0x8875, R6
	RRC	 R6
	mov	#0x0104, R2
	mov	#0xC43A, R6
	RRC.b	 R6
	mov	#0x0107, R2
	mov	#0xB149, R6
	RRC	 R6
	mov	#0x0007, R2
	mov	#0x58A4, R6
	RRC	 R6
	mov	#0x0002, R2
	mov	#0x7F06, R6
	RRC	 R6
	mov	#0x0100, R2
	mov	#0x6CD7, R6
	RRC	 R6
	mov	#0x0004, R2
	mov	#0xB66A, R6
	RRC.b	 R6
	mov	#0x0005, R2
	mov	#0x2D9A, R6
	RRC.b	 R6
	mov	#0x0102, R2
	mov	#0x16CD, R6
	RRC.b	 R6
	mov	#0x0104, R2
	mov	#0x5832, R6
	RRC.b	 R6
	mov	#0x0007, R2
	mov	#0xFF4C, R6
	RRC.b	 R6
	mov	#0x0005, R2
	mov	#0x9678, R6
	RRC.b	 R6
	mov	#0x0005, R2
	mov	#0x8B5E, R6
	SWPB.b	 R6
	mov	#0x0002, R2
	mov	#0x64C5, R6
	SWPB	 R6
	mov	#0x0102, R2
	mov	#0x27D0, R6
	SWPB	 R6
	mov	#0x0100, R2
	mov	#0x2487, R6
	SWPB.b	 R6
	mov	#0x0005, R2
	mov	#0xFF37, R6
	SWPB.b	 R6
	mov	#0x0106, R2
	mov	#0xD98E, R6
	SWPB.b	 R6
	mov	#0x0104, R2
	mov	#0xEFB2, R6
	SWPB.b	 R6
	mov	#0x0006, R2
	mov	#0x77ED, R6
	SWPB.b	 R6
	mov	#0x0002, R2
	mov	#0xF9B1, R6
	SWPB	 R6
	mov	#0x0001, R2
	mov	#0x9518, R6
	SWPB	 R6
	mov	#0x0000, R2
	mov	#0xC82C, R6
	SWPB.b	 R6
	mov	#0x0001, R2
	mov	#0xB642, R6
	SWPB	 R6
	mov	#0x0101, R2
	mov	#0x8875, R6
	SWPB	 R6
	mov	#0x0104, R2
	mov	#0xC43A, R6
	SWPB	 R6
	mov	#0x0107, R2
	mov	#0xB148, R6
	SWPB	 R6
	mov	#0x0007, R2
	mov	#0x58A4, R6
	SWPB	 R6
	mov	#0x0002, R2
	mov	#0x7F06, R6
	SWPB.b	 R6
	mov	#0x0100, R2
	mov	#0x6CD6, R6
	SWPB.b	 R6
	mov	#0x0004, R2
	mov	#0xB66A, R6
	SWPB.b	 R6
	mov	#0x0102, R2
	mov	#0x5B34, R6
	SWPB.b	 R6
	mov	#0x0005, R2
	mov	#0x2D9A, R6
	SWPB.b	 R6
	mov	#0x0102, R2
	mov	#0x16CC, R6
	SWPB.b	 R6
	mov	#0x0104, R2
	mov	#0x5832, R6
	SWPB.b	 R6
	mov	#0x0007, R2
	mov	#0xFF4C, R6
	SWPB.b	 R6
	mov	#0x0102, R2
	mov	#0x2CF2, R6
	SWPB.b	 R6
	mov	#0x0005, R2
	mov	#0x9678, R6
	SWPB.b	 R6
	mov	#0x0003, R2
	mov	#0x9869, R6
	SWPB.b	 R6
	mov	#0x0001, R2
	mov	#0xCD35, R6
	SWPB	 R6
	mov	#0x0003, R2
	mov	#0xE692, R6
	SXT	 R6
	mov	#0x0100, R2
	mov	#0xD465, R6
	SXT.b	 R6
	mov	#0x0003, R2
	mov	#0x2D18, R6
	SXT	 R6
	mov	#0x0004, R2
	mov	#0x4A45, R6
	SXT.b	 R6
	mov	#0x0005, R2
	mov	#0xF713, R6
	SXT	 R6
	mov	#0x0107, R2
	mov	#0xF5FE, R6
	SXT.b	 R6
	mov	#0x0104, R2
	mov	#0xEF8B, R6
	SXT	 R6
	mov	#0x0006, R2
	mov	#0xFFC8, R6
	SXT.b	 R6
	mov	#0x0002, R2
	mov	#0x28B0, R6
	SXT.b	 R6
	mov	#0x0001, R2
	mov	#0x9459, R6
	SXT.b	 R6
	mov	#0x0000, R2
	mov	#0xCA2C, R6
	SXT	 R6
	mov	#0x0001, R2
	mov	#0xB642, R6
	SXT	 R6
	mov	#0x0101, R2
	mov	#0x8875, R6
	SXT.b	 R6
	mov	#0x0104, R2
	mov	#0xC43A, R6
	SXT	 R6
	mov	#0x0107, R2
	mov	#0xB149, R6
	SXT	 R6
	mov	#0x0007, R2
	mov	#0x58A4, R6
	SXT.b	 R6
	mov	#0x0002, R2
	mov	#0x7F07, R6
	SXT.b	 R6
	mov	#0x0100, R2
	mov	#0x6CD6, R6
	SXT.b	 R6
	mov	#0x0005, R2
	mov	#0xC964, R5
	mov	#0xA4E5, R6
	ADDC.b	R5, R6
	mov	#0x0102, R2
	mov	#0x3F3B, R5
	mov	#0xFA50, R6
	ADDC.b	R5, R6
	mov	#0x0001, R2
	mov	#0xEA9A, R5
	mov	#0xB2BB, R6
	ADDC	R5, R6
	mov	#0x0104, R2
	mov	#0xA057, R5
	mov	#0x2A4B, R6
	ADDC.b	R5, R6
	mov	#0x0102, R2
	mov	#0x74E1, R5
	mov	#0x49F1, R6
	ADDC.b	R5, R6
	mov	#0x0005, R2
	mov	#0xBF00, R5
	mov	#0x7DC7, R6
	ADDC	R5, R6
	mov	#0x0007, R2
	mov	#0x8000, R5
	mov	#0xAF76, R6
	ADDC.b	R5, R6
	mov	#0x0103, R2
	mov	#0x4001, R5
	mov	#0xFBE4, R6
	ADDC.b	R5, R6
	mov	#0x0001, R2
	mov	#0x1C40, R5
	mov	#0x9558, R6
	ADDC	R5, R6
	mov	#0x0000, R2
	mov	#0x0A80, R5
	mov	#0xCA2C, R6
	ADDC	R5, R6
	mov	#0x0100, R2
	mov	#0x0603, R5
	mov	#0x6516, R6
	ADDC	R5, R6
	mov	#0x0000, R2
	mov	#0x7410, R5
	mov	#0x5B21, R6
	ADDC	R5, R6
	mov	#0x0104, R2
	mov	#0xCC21, R5
	mov	#0xC43A, R6
	ADDC	R5, R6
	mov	#0x0006, R2
	mov	#0x6604, R5
	mov	#0x621D, R6
	ADDC	R5, R6
	mov	#0x0007, R2
	mov	#0xC408, R5
	mov	#0x58A4, R6
	ADDC	R5, R6
	mov	#0x0103, R2
	mov	#0x6201, R5
	mov	#0xAC52, R6
	ADDC	R5, R6
	mov	#0x0001, R2
	mov	#0x1000, R5
	mov	#0xBF82, R6
	ADDC.b	R5, R6
	mov	#0x0004, R2
	mov	#0x0800, R5
	mov	#0xB66A, R6
	ADDC.b	R5, R6
	mov	#0x0102, R2
	mov	#0x2001, R5
	mov	#0x5B34, R6
	ADDC.b	R5, R6
	mov	#0x0005, R2
	mov	#0x0000, R5
	mov	#0x2D9B, R6
	ADDC.b	R5, R6
	mov	#0x0102, R2
	mov	#0x0201, R5
	mov	#0x16CC, R6
	ADDC.b	R5, R6
	mov	#0x0005, R2
	mov	#0x0400, R5
	mov	#0x8B66, R6
	ADDC.b	R5, R6
	mov	#0x0106, R2
	mov	#0x0001, R5
	mov	#0x2C18, R6
	ADDC.b	R5, R6
	mov	#0x0005, R2
	mov	#0x0732, R5
	mov	#0x9679, R6
	ADDC	R5, R6
	mov	#0x0100, R2
	mov	#0x865D, R5
	mov	#0x266B, R6
	AND.b	R5, R6
	mov	#0x0007, R2
	mov	#0x68EA, R5
	mov	#0x7000, R6
	AND.b	R5, R6
	mov	#0x0001, R2
	mov	#0xEB74, R5
	mov	#0x72A5, R6
	AND	R5, R6
	mov	#0x0104, R2
	mov	#0xF4A3, R5
	mov	#0x103E, R6
	AND.b	R5, R6
	mov	#0x0102, R2
	mov	#0x52FF, R5
	mov	#0xCD9E, R6
	AND.b	R5, R6
	mov	#0x0004, R2
	mov	#0xBEE8, R5
	mov	#0xBCCB, R6
	AND	R5, R6
	mov	#0x0006, R2
	mov	#0x0400, R5
	mov	#0xEDE4, R6
	AND.b	R5, R6
	mov	#0x0103, R2
	mov	#0x2001, R5
	mov	#0xFFE4, R6
	AND.b	R5, R6
	mov	#0x0001, R2
	mov	#0x1C40, R5
	mov	#0x9558, R6
	AND	R5, R6
	mov	#0x0000, R2
	mov	#0x0F00, R5
	mov	#0xCB2C, R6
	AND	R5, R6
	mov	#0x0100, R2
	mov	#0x0281, R5
	mov	#0x6516, R6
	AND	R5, R6
	mov	#0x0000, R2
	mov	#0x7402, R5
	mov	#0x5B21, R6
	AND	R5, R6
	mov	#0x0104, R2
	mov	#0x4811, R5
	mov	#0xC43A, R6
	AND	R5, R6
	mov	#0x0006, R2
	mov	#0x6620, R5
	mov	#0x621D, R6
	AND	R5, R6
	mov	#0x0007, R2
	mov	#0xC404, R5
	mov	#0x58A4, R6
	AND	R5, R6
	mov	#0x0103, R2
	mov	#0x6209, R5
	mov	#0xAC52, R6
	AND	R5, R6
	mov	#0x0001, R2
	mov	#0x4600, R5
	mov	#0xBF83, R6
	AND	R5, R6
	mov	#0x0004, R2
	mov	#0x1000, R5
	mov	#0xB66A, R6
	AND.b	R5, R6
	mov	#0x0102, R2
	mov	#0x0801, R5
	mov	#0x5B34, R6
	AND.b	R5, R6
	mov	#0x0005, R2
	mov	#0x4000, R5
	mov	#0x2D9A, R6
	AND.b	R5, R6
	mov	#0x0102, R2
	mov	#0x0001, R5
	mov	#0x16CD, R6
	AND.b	R5, R6
	mov	#0x0005, R2
	mov	#0x0200, R5
	mov	#0x8B66, R6
	AND.b	R5, R6
	mov	#0x0106, R2
	mov	#0x8001, R5
	mov	#0x2C18, R6
	AND.b	R5, R6
	mov	#0x0003, R2
	mov	#0x0000, R5
	mov	#0xFFA6, R6
	AND.b	R5, R6
	mov	#0x0102, R2
	mov	#0x8319, R5
	mov	#0x4B3C, R6
	AND.b	R5, R6
	mov	#0x0103, R2
	mov	#0x865D, R5
	mov	#0x266B, R6
	BIC.b	R5, R6
	mov	#0x0000, R2
	mov	#0x5996, R5
	mov	#0xD888, R6
	BIC.b	R5, R6
	mov	#0x0001, R2
	mov	#0xFF70, R5
	mov	#0xD9C9, R6
	BIC	R5, R6
	mov	#0x0005, R2
	mov	#0x2240, R5
	mov	#0x23FE, R6
	BIC	R5, R6
	mov	#0x0102, R2
	mov	#0x3E87, R5
	mov	#0x7DC3, R6
	BIC.b	R5, R6
	mov	#0x0105, R2
	mov	#0xD8C9, R5
	mov	#0x7F08, R6
	BIC.b	R5, R6
	mov	#0x0007, R2
	mov	#0x0000, R5
	mov	#0xEFFF, R6
	BIC.b	R5, R6
	mov	#0x0103, R2
	mov	#0x4001, R5
	mov	#0xFBE4, R6
	BIC.b	R5, R6
	mov	#0x0001, R2
	mov	#0x1D00, R5
	mov	#0x9458, R6
	BIC	R5, R6
	mov	#0x0000, R2
	mov	#0x0880, R5
	mov	#0xCA2C, R6
	BIC	R5, R6
	mov	#0x0100, R2
	mov	#0x0603, R5
	mov	#0x6516, R6
	BIC	R5, R6
	mov	#0x0000, R2
	mov	#0x7410, R5
	mov	#0x5B21, R6
	BIC	R5, R6
	mov	#0x0104, R2
	mov	#0xC821, R5
	mov	#0xC43A, R6
	BIC	R5, R6
	mov	#0x0006, R2
	mov	#0x6604, R5
	mov	#0x621D, R6
	BIC	R5, R6
	mov	#0x0007, R2
	mov	#0xC408, R5
	mov	#0x58A4, R6
	BIC	R5, R6
	mov	#0x0103, R2
	mov	#0x6201, R5
	mov	#0xAC52, R6
	BIC	R5, R6
	mov	#0x0001, R2
	mov	#0x1000, R5
	mov	#0xBF82, R6
	BIC.b	R5, R6
	mov	#0x0004, R2
	mov	#0x0800, R5
	mov	#0xB66A, R6
	BIC.b	R5, R6
	mov	#0x0102, R2
	mov	#0x2001, R5
	mov	#0x5B34, R6
	BIC.b	R5, R6
	mov	#0x0005, R2
	mov	#0x0200, R5
	mov	#0x2D9A, R6
	BIC.b	R5, R6
	mov	#0x0102, R2
	mov	#0x8001, R5
	mov	#0x16CC, R6
	BIC.b	R5, R6
	mov	#0x0005, R2
	mov	#0x0400, R5
	mov	#0x8B66, R6
	BIC.b	R5, R6
	mov	#0x0106, R2
	mov	#0x0001, R5
	mov	#0x2C18, R6
	BIC.b	R5, R6
	mov	#0x0100, R2
	mov	#0x865D, R5
	mov	#0x266B, R6
	BIS.b	R5, R6
	mov	#0x0007, R2
	mov	#0xF782, R5
	mov	#0x4045, R6
	BIS.b	R5, R6
	mov	#0x0001, R2
	mov	#0xEF7E, R5
	mov	#0xB39E, R6
	BIS	R5, R6
	mov	#0x0104, R2
	mov	#0x88CB, R5
	mov	#0xBE98, R6
	BIS.b	R5, R6
	mov	#0x0102, R2
	mov	#0x8001, R5
	mov	#0xF98E, R6
	BIS.b	R5, R6
	mov	#0x0005, R2
	mov	#0x0800, R5
	mov	#0xBD0E, R6
	BIS.b	R5, R6
	mov	#0x0006, R2
	mov	#0xBA80, R5
	mov	#0xFFD9, R6
	BIS	R5, R6
	mov	#0x0103, R2
	mov	#0xD041, R5
	mov	#0xFAE4, R6
	BIS	R5, R6
	mov	#0x0001, R2
	mov	#0x1D00, R5
	mov	#0x9458, R6
	BIS	R5, R6
	mov	#0x0000, R2
	mov	#0x0E02, R5
	mov	#0xCA2C, R6
	BIS	R5, R6
	mov	#0x0100, R2
	mov	#0x0211, R5
	mov	#0x6516, R6
	BIS	R5, R6
	mov	#0x0000, R2
	mov	#0x7420, R5
	mov	#0x5B21, R6
	BIS	R5, R6
	mov	#0x0104, R2
	mov	#0xCC05, R5
	mov	#0xC43A, R6
	BIS	R5, R6
	mov	#0x0006, R2
	mov	#0x6608, R5
	mov	#0x621D, R6
	BIS	R5, R6
	mov	#0x0007, R2
	mov	#0xC400, R5
	mov	#0x58A4, R6
	BIS	R5, R6
	mov	#0x0103, R2
	mov	#0x1001, R5
	mov	#0xAC52, R6
	BIS.b	R5, R6
	mov	#0x0001, R2
	mov	#0x2000, R5
	mov	#0xBF82, R6
	BIS.b	R5, R6
	mov	#0x0004, R2
	mov	#0x4000, R5
	mov	#0xB66A, R6
	BIS.b	R5, R6
	mov	#0x0102, R2
	mov	#0x0001, R5
	mov	#0x5B35, R6
	BIS.b	R5, R6
	mov	#0x0005, R2
	mov	#0x0200, R5
	mov	#0x2D9A, R6
	BIS.b	R5, R6
	mov	#0x0102, R2
	mov	#0x0401, R5
	mov	#0x16CC, R6
	BIS.b	R5, R6
	mov	#0x0005, R2
	mov	#0x0000, R5
	mov	#0x8B66, R6
	BIS.b	R5, R6
	mov	#0x0003, R2
	mov	#0xE320, R5
	mov	#0xFFA6, R6
	BIS.b	R5, R6
	mov	#0x0001, R2
	mov	#0x30BC, R5
	mov	#0x518B, R6
	BIT.b	R5, R6
	mov	#0x0006, R2
	mov	#0xCF8E, R5
	mov	#0xC634, R6
	BIT.b	R5, R6
	mov	#0x0101, R2
	mov	#0xBB23, R5
	mov	#0x5702, R6
	BIT	R5, R6
	mov	#0x0104, R2
	mov	#0xEBF7, R5
	mov	#0x4B7F, R6
	BIT.b	R5, R6
	mov	#0x0103, R2
	mov	#0x209D, R5
	mov	#0x2097, R6
	BIT.b	R5, R6
	mov	#0x0005, R2
	mov	#0x9F56, R5
	mov	#0xBE42, R6
	BIT.b	R5, R6
	mov	#0x0007, R2
	mov	#0x0F72, R5
	mov	#0x0A63, R6
	BIT.b	R5, R6
	mov	#0x0103, R2
	mov	#0x289F, R5
	mov	#0xA85E, R6
	BIT.b	R5, R6
	mov	#0x0001, R2
	mov	#0x5D70, R5
	mov	#0xBD41, R6
	BIT	R5, R6
	mov	#0x0000, R2
	mov	#0xDC00, R5
	mov	#0xD001, R6
	BIT.b	R5, R6
	mov	#0x0100, R2
	mov	#0x8181, R5
	mov	#0x81C0, R6
	BIT.b	R5, R6
	mov	#0x0000, R2
	mov	#0xF8B6, R5
	mov	#0xFABE, R6
	BIT.b	R5, R6
	mov	#0x0104, R2
	mov	#0x0D23, R5
	mov	#0x0436, R6
	BIT.b	R5, R6
	mov	#0x0006, R2
	mov	#0x6B90, R5
	mov	#0x631C, R6
	BIT.b	R5, R6
	mov	#0x0006, R2
	mov	#0x8580, R5
	mov	#0xAE00, R6
	BIT.b	R5, R6
	mov	#0x0102, R2
	mov	#0x8E41, R5
	mov	#0xA640, R6
	BIT.b	R5, R6
	mov	#0x0001, R2
	mov	#0x4600, R5
	mov	#0xBE01, R6
	BIT	R5, R6
	mov	#0x0004, R2
	mov	#0xD4C0, R5
	mov	#0xB681, R6
	BIT	R5, R6
	mov	#0x0102, R2
	mov	#0xEA09, R5
	mov	#0x5A09, R6
	BIT	R5, R6
	mov	#0x0004, R2
	mov	#0xF40A, R5
	mov	#0x2C0A, R6
	BIT	R5, R6
	mov	#0x0103, R2
	mov	#0x7A01, R5
	mov	#0x1607, R6
	BIT	R5, R6
	mov	#0x0004, R2
	mov	#0x9200, R5
	mov	#0xB200, R6
	BIT.b	R5, R6
	mov	#0x0107, R2
	mov	#0xAFC9, R5
	mov	#0x8F6A, R6
	BIT.b	R5, R6
	mov	#0x0002, R2
	mov	#0xA5CA, R5
	mov	#0xB16A, R6
	BIT.b	R5, R6
	mov	#0x0005, R2
	mov	#0x41CA, R5
	mov	#0x4169, R6
	BIT.b	R5, R6
	mov	#0x0102, R2
	mov	#0x8E81, R5
	mov	#0xA6C0, R6
	BIT.b	R5, R6
	mov	#0x0000, R2
	mov	#0x3400, R5
	mov	#0x0401, R6
	BIT.b	R5, R6
	mov	#0x0100, R2
	mov	#0x1B57, R5
	mov	#0xE65A, R6
	BIT	R5, R6
	mov	#0x0100, R2
	mov	#0x7A29, R5
	mov	#0x9B27, R6
	BIT	R5, R6
	mov	#0x0004, R2
	mov	#0xBD14, R5
	mov	#0x4C13, R6
	BIT	R5, R6
	mov	#0x0002, R2
	mov	#0xDE0A, R5
	mov	#0xA709, R6
	BIT	R5, R6
	mov	#0x0101, R2
	mov	#0xEE85, R5
	mov	#0xD294, R6
	BIT	R5, R6
	mov	#0x0100, R2
	mov	#0x1DB7, R5
	mov	#0x5F03, R6
	BIT.b	R5, R6
	
        /* ----------------------         END OF TEST        --------------- */
	mov      #0xFACC, r15	
        /* ----------------------         END OF TEST        --------------- */
end_of_test:
	nop
	br #0xffff



        /* ----------------------         TEST FUNCTIONS     --------------- */

TEST_ROUTINE_RN:
        mov #0x1234, r5
	ret

TEST_ROUTINE_aRN:
        mov #0x5678, r5
	ret

TEST_ROUTINE_aRNi:
        mov #0x9abc, r5
	ret

TEST_ROUTINE_N:
        mov #0xabcd, r5
	ret

TEST_ROUTINE_xRN:
        mov #0xef01, r5
	ret

TEST_ROUTINE_EDE:
        mov #0x2345, r5
	ret

TEST_ROUTINE_aEDE:
        mov #0x6789, r5
	ret

TEST_ROUTINE_SPECIAL_aRNi:
        mov #0x159a, r5
	sub #0x000a, r1
	ret
  /* ----------------------            DATA TABLE      --------------- */
data_aRn_0x1234:
        .word 0x1234
data_aRn_0x5678:
        .word 0x5678

data_aRni_0x9abc:
        .word 0x9abc
        .word 0xdef0

data_xRn_0x0fed:
        .word 0x0000
        .word 0x0000
        .word 0x0000
        .word 0x0000
        .word 0x0000
        .word 0x0000
        .word 0x0000
        .word 0x0000
        .word 0x0000
        .word 0x0000
        .word 0x0000
        .word 0x0000
        .word 0x0000
        .word 0x0fed
        .word 0xcba9

data_EDE_0x8765:
        .word 0x8765
data_EDE_0x4321:
        .word 0x4321

data_aEDE_0x1f2e:
        .word 0x1f2e
data_aEDE_0x3d4c:
        .word 0x3d4c



        /* ----------------------         INTERRUPT VECTORS  --------------- */

.section .vectors, "a"
.word end_of_test  ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test  ; Interrupt  1                      <unused>
.word end_of_test  ; Interrupt  2                      <unused>
.word end_of_test  ; Interrupt  3                      <unused>
.word end_of_test  ; Interrupt  4                      <unused>
.word end_of_test  ; Interrupt  5                      <unused>
.word end_of_test  ; Interrupt  6                      <unused>
.word end_of_test  ; Interrupt  7                      <unused>
.word end_of_test  ; Interrupt  8                      <unused>
.word end_of_test  ; Interrupt  9                      <unused>
.word end_of_test  ; Interrupt 10                      Watchdog timer
.word end_of_test  ; Interrupt 11                      <unused>
.word end_of_test  ; Interrupt 12                      <unused>
.word end_of_test  ; Interrupt 13                      <unused>
.word end_of_test  ; Interrupt 14                      NMI
.word main         ; Interrupt 15 (highest priority)   RESET
